{"ast":null,"code":"import _DeleteOutlined from \"@ant-design/icons/lib/icons/DeleteOutlined\";\nimport _EditOutlined from \"@ant-design/icons/lib/icons/EditOutlined\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport clone from \"clone\";\nimport { UserListWrapper } from \"./UserList.style\";\nimport Popconfirm from \"@iso/components/Feedback/Popconfirm\";\nimport Tag from \"@iso/components/uielements/tag\";\nimport { DateCell, ImageCell, LinkCell, TextCell } from \"@iso/components/Tables/HelperCells\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport userActions from \"@redux/users/actions\";\nimport { useRouter } from \"next/router\";\nimport PageHeader from \"@iso/components/utility/pageHeader\";\nimport Box from \"@iso/components/utility/box\";\nimport HelperText from \"@iso/components/utility/helper-text\";\nimport Scrollbars from \"@iso/components/utility/customScrollBar\";\nimport TableWrapper from \"@iso/containers/Tables/AntTables/AntTables.styles\";\nimport LayoutWrapper from \"@iso/components/utility/layoutWrapper\";\n\nconst renderCell = (object, type, key) => {\n  const value = object[key];\n\n  switch (type) {\n    case \"ImageCell\":\n      return ImageCell(value);\n\n    case \"DateCell\":\n      return DateCell(value);\n\n    case \"LinkCell\":\n      return LinkCell(value);\n\n    default:\n      return TextCell(value);\n  }\n};\n\nconst userTableColumns = [{\n  title: \"First Name\",\n  key: \"first_name\",\n  width: 100,\n  render: object => renderCell(object, \"TextCell\", \"first_name\")\n}, {\n  title: \"Last Name\",\n  key: \"last_name\",\n  width: 100,\n  render: object => renderCell(object, \"TextCell\", \"last_name\")\n}, {\n  title: \"Username\",\n  key: \"username\",\n  width: 200,\n  render: object => renderCell(object, \"TextCell\", \"username\")\n}, {\n  title: \"Role\",\n  key: \"role\",\n  width: 200,\n  render: object => {\n    switch (object.role) {\n      case \"S\":\n        return __jsx(\"p\", {\n          key: \"1\"\n        }, \"Super Admin\");\n\n      case \"A\":\n        return __jsx(\"p\", {\n          key: \"2\"\n        }, \"Admin\");\n\n      default:\n        return __jsx(\"p\", {\n          key: \"3\"\n        }, \"Editor\");\n    }\n  }\n}, {\n  title: \"Status\",\n  key: \"status\",\n  width: 200,\n  render: object => {\n    switch (object.status) {\n      case \"P\":\n        return __jsx(Tag, {\n          color: \"orange\"\n        }, \"Pending\");\n\n      case \"A\":\n        return __jsx(Tag, {\n          color: \"green\"\n        }, \"Approved\");\n\n      case \"B\":\n        return __jsx(Tag, {\n          color: \"red\"\n        }, \"Blocked\");\n\n      default:\n        return __jsx(Tag, {\n          color: \"green\"\n        }, \"Approved\");\n    }\n  }\n}];\nexport default function UserList() {\n  const {\n    items\n  } = useSelector(state => state.Users);\n  const [state, setState] = React.useState({\n    columns: createcolumns(clone(userTableColumns)),\n    dataList: items\n  });\n  const router = useRouter();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(userActions.getAllUsers());\n  }, []);\n  const {\n    columns,\n    dataList\n  } = state;\n\n  function createcolumns(columns) {\n    const optColumn = {\n      title: \"operation\",\n      dataIndex: \"operation\",\n      width: 200,\n      render: (text, record, index) => __jsx(\"div\", {\n        className: \"opt-cell\"\n      }, __jsx(_EditOutlined, {\n        onClick: () => onEditCell(record.id)\n      }), __jsx(Popconfirm, {\n        title: \"Sure to delete?\",\n        onConfirm: () => onDeleteCell(record.id)\n      }, __jsx(_DeleteOutlined, null)))\n    };\n    columns.push(optColumn);\n    return columns;\n  }\n\n  function onEditCell(index) {\n    router.push(`/admin/user?id=${index}`);\n  }\n\n  function onDeleteCell(userId) {\n    dispatch(userActions.deleteUser(userId));\n  }\n\n  return __jsx(LayoutWrapper, null, __jsx(PageHeader, null, \"User\"), __jsx(Box, null, __jsx(UserListWrapper, null, (items === null || items === void 0 ? void 0 : items.length) === 0 ? __jsx(HelperText, {\n    text: \"No Users found\"\n  }) : __jsx(\"div\", {\n    className: \"isoUserTable\"\n  }, __jsx(Scrollbars, {\n    style: {\n      width: \"100%\",\n      height: \"calc(60vh - 70px)\"\n    }\n  }, __jsx(TableWrapper, {\n    columns: columns,\n    dataSource: items,\n    pagination: {\n      pageSize: 5\n    },\n    className: \"userListTable\"\n  }))))));\n}","map":null,"metadata":{},"sourceType":"module"}