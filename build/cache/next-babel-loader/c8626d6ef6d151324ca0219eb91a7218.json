{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\Projects\\\\starsofboston\\\\next-django\\\\isomorphic-next\\\\shared\\\\components\\\\uielements\\\\editor.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\"; // import ReactQuill from \"react-quill\";\n\nimport \"react-quill/dist/quill.snow.css\";\nimport \"react-quill/dist/quill.bubble.css\";\nimport \"react-quill/dist/quill.core.css\";\nimport EditorWrapper from \"./styles/editor.style\";\nvar ReactQuill = true ? require('react-quill') : function () {\n  return false;\n};\n\nvar Editor = /*#__PURE__*/function (_React$Component) {\n  _inherits(Editor, _React$Component);\n\n  var _super = _createSuper(Editor);\n\n  function Editor(props) {\n    var _this;\n\n    _classCallCheck(this, Editor);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      editorHtml: \"\",\n      theme: \"snow\"\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Editor, [{\n    key: \"handleChange\",\n    value: function handleChange(html) {\n      this.setState({\n        editorHtml: html\n      });\n      this.props.onEditorStateChange(html);\n    }\n  }, {\n    key: \"handleThemeChange\",\n    value: function handleThemeChange(newTheme) {\n      if (newTheme === \"core\") newTheme = null;\n      this.setState({\n        theme: newTheme\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(EditorWrapper, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 7\n        }\n      }, __jsx(ReactQuill, {\n        theme: this.state.theme,\n        onChange: this.handleChange,\n        value: this.state.editorHtml,\n        modules: Editor.modules,\n        formats: Editor.formats,\n        bounds: \".app\",\n        placeholder: this.props.placeholder,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Editor;\n}(React.Component);\n/*\n * Quill modules to attach to editor\n * See https://quilljs.com/docs/modules/ for complete options\n */\n\n\nEditor.modules = {\n  toolbar: [// [{ header: '1' }, { header: '2' }, { font: [] }],\n  // [{ size: [] }],\n  [{\n    size: [\"small\", false, \"large\", \"huge\"]\n  }], // custom dropdown\n  [{\n    header: [1, 2, 3, 4, 5, 6, false]\n  }], [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"], [{\n    list: \"ordered\"\n  }, {\n    list: \"bullet\"\n  }, {\n    indent: \"-1\"\n  }, {\n    indent: \"+1\"\n  }], [\"link\", \"image\", \"video\"], [\"clean\"], [{\n    color: []\n  }, {\n    background: []\n  }], // dropdown with defaults from theme\n  [{\n    font: []\n  }], [{\n    align: []\n  }]],\n  clipboard: {\n    // toggle to add extra line breaks when pasting HTML:\n    matchVisual: false\n  }\n};\n/*\n * Quill editor formats\n * See https://quilljs.com/docs/formats/\n */\n\nEditor.formats = [\"header\", \"font\", \"size\", \"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\", \"list\", \"bullet\", \"indent\", \"link\", \"image\", \"video\"];\n/*\n * PropType validation\n */\n\nEditor.propTypes = {\n  placeholder: PropTypes.string\n};\nexport default Editor;","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/shared/components/uielements/editor.js"],"names":["React","PropTypes","EditorWrapper","ReactQuill","require","Editor","props","state","editorHtml","theme","handleChange","bind","html","setState","onEditorStateChange","newTheme","modules","formats","placeholder","Component","toolbar","size","header","list","indent","color","background","font","align","clipboard","matchVisual","propTypes","string"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"react-quill/dist/quill.bubble.css\";\nimport \"react-quill/dist/quill.core.css\";\nimport EditorWrapper from \"./styles/editor.style\";\nconst ReactQuill = typeof window === 'object' ? require('react-quill') : () => false;\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { editorHtml: \"\", theme: \"snow\" };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(html) {\n    this.setState({ editorHtml: html });\n    this.props.onEditorStateChange(html);\n  }\n\n  handleThemeChange(newTheme) {\n    if (newTheme === \"core\") newTheme = null;\n    this.setState({ theme: newTheme });\n  }\n\n  render() {\n    return (\n      <EditorWrapper>\n        <ReactQuill\n          theme={this.state.theme}\n          onChange={this.handleChange}\n          value={this.state.editorHtml}\n          modules={Editor.modules}\n          formats={Editor.formats}\n          bounds={\".app\"}\n          placeholder={this.props.placeholder}\n        />\n        {/* <div className=\"themeSwitcher\">\n          <label>Theme </label>\n          <select onChange={(e) => this.handleThemeChange(e.target.value)}>\n            <option value=\"snow\">Snow</option>\n            <option value=\"bubble\">Bubble</option>\n            <option value=\"core\">Core</option>\n          </select>\n        </div> */}\n      </EditorWrapper>\n    );\n  }\n}\n\n/*\n * Quill modules to attach to editor\n * See https://quilljs.com/docs/modules/ for complete options\n */\nEditor.modules = {\n  toolbar: [\n    // [{ header: '1' }, { header: '2' }, { font: [] }],\n    // [{ size: [] }],\n    [{ size: [\"small\", false, \"large\", \"huge\"] }], // custom dropdown\n    [{ header: [1, 2, 3, 4, 5, 6, false] }],\n    [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\n    [\n      { list: \"ordered\" },\n      { list: \"bullet\" },\n      { indent: \"-1\" },\n      { indent: \"+1\" },\n    ],\n    [\"link\", \"image\", \"video\"],\n    [\"clean\"],\n    [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n    [{ font: [] }],\n    [{ align: [] }],\n  ],\n  clipboard: {\n    // toggle to add extra line breaks when pasting HTML:\n    matchVisual: false,\n  },\n};\n/*\n * Quill editor formats\n * See https://quilljs.com/docs/formats/\n */\nEditor.formats = [\n  \"header\",\n  \"font\",\n  \"size\",\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"strike\",\n  \"blockquote\",\n  \"list\",\n  \"bullet\",\n  \"indent\",\n  \"link\",\n  \"image\",\n  \"video\",\n];\n\n/*\n * PropType validation\n */\nEditor.propTypes = {\n  placeholder: PropTypes.string,\n};\n\nexport default Editor;\n"]},"metadata":{},"sourceType":"module"}