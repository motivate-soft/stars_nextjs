{"ast":null,"code":"import { all, takeLatest, put, call, fork } from 'redux-saga/effects';\nimport { logout, removeCookie, setCookie } from './auth.utils';\nimport { notification } from '@iso/components';\nimport JwtAuthentication from './jwtAuthentication';\nimport actions from './actions';\nimport jwtDecode from \"jwt-decode\";\nexport function* jwtLoginRequest() {\n  yield takeLatest(actions.JWT_LOGIN_REQUEST_START, function* ({\n    payload: {\n      userInfo,\n      history\n    }\n  }) {\n    try {\n      const res = yield call(JwtAuthentication.login, userInfo);\n      let token, profile;\n\n      if (res.access) {\n        token = res.access;\n        profile = jwtDecode(res.access);\n        notification('success', 'login success');\n        yield put({\n          type: actions.LOGIN_REQUEST_SUCCESS,\n          token,\n          profile\n        });\n      } else {\n        notification('warning', 'Response type is invalid');\n        yield put(actions.loginRequestFailure(\"Invalid server response\"));\n      }\n    } catch (error) {\n      notification('error', error.message);\n      yield put(actions.loginRequestFailure(error.message));\n    }\n  });\n}\n\nfunction* logoutRequest() {\n  try {\n    yield call(logout);\n    yield put(actions.logoutRequestSuccess());\n  } catch (error) {\n    yield put(actions.logoutRequestFailure(error));\n  }\n}\n\nexport function* loginSuccess() {\n  yield takeLatest(actions.LOGIN_REQUEST_SUCCESS, function* (payload) {\n    setCookie('login_saga', payload.token);\n    yield setCookie('token', payload.token);\n  });\n}\nexport function* loginError() {\n  yield takeLatest(actions.LOGOUT_REQUEST_FAILURE, function* (payload) {\n    console.log(\"loginError\", payload);\n  });\n}\nexport function* onLogout() {\n  yield takeLatest(actions.LOGOUT_REQUEST_START, logoutRequest);\n}\nexport default function* rootSaga() {\n  yield all([call(jwtLoginRequest), call(loginSuccess), call(onLogout)]);\n}","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/redux/authentication/sagas.js"],"names":["all","takeLatest","put","call","fork","logout","removeCookie","setCookie","notification","JwtAuthentication","actions","jwtDecode","jwtLoginRequest","JWT_LOGIN_REQUEST_START","payload","userInfo","history","res","login","token","profile","access","type","LOGIN_REQUEST_SUCCESS","loginRequestFailure","error","message","logoutRequest","logoutRequestSuccess","logoutRequestFailure","loginSuccess","loginError","LOGOUT_REQUEST_FAILURE","console","log","onLogout","LOGOUT_REQUEST_START","rootSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,UAAb,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,IAApC,QAA+C,oBAA/C;AACA,SAASC,MAAT,EAAiBC,YAAjB,EAA+BC,SAA/B,QAA+C,cAA/C;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAGA,OAAO,UAAUC,eAAV,GAA4B;AAC/B,QAAMX,UAAU,CAACS,OAAO,CAACG,uBAAT,EAAkC,WAAW;AAACC,IAAAA,OAAO,EAAE;AAACC,MAAAA,QAAD;AAAWC,MAAAA;AAAX;AAAV,GAAX,EAA2C;AACzF,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMd,IAAI,CAACM,iBAAiB,CAACS,KAAnB,EAA0BH,QAA1B,CAAtB;AACA,UAAII,KAAJ,EAAWC,OAAX;;AACA,UAAIH,GAAG,CAACI,MAAR,EAAgB;AACZF,QAAAA,KAAK,GAAGF,GAAG,CAACI,MAAZ;AACAD,QAAAA,OAAO,GAAGT,SAAS,CAACM,GAAG,CAACI,MAAL,CAAnB;AACAb,QAAAA,YAAY,CAAC,SAAD,EAAY,eAAZ,CAAZ;AAEA,cAAMN,GAAG,CAAC;AACNoB,UAAAA,IAAI,EAAEZ,OAAO,CAACa,qBADR;AAENJ,UAAAA,KAFM;AAGNC,UAAAA;AAHM,SAAD,CAAT;AAKH,OAVD,MAUO;AACHZ,QAAAA,YAAY,CAAC,SAAD,EAAY,0BAAZ,CAAZ;AACA,cAAMN,GAAG,CAACQ,OAAO,CAACc,mBAAR,CAA4B,yBAA5B,CAAD,CAAT;AACH;AACJ,KAjBD,CAiBE,OAAOC,KAAP,EAAc;AACZjB,MAAAA,YAAY,CAAC,OAAD,EAAUiB,KAAK,CAACC,OAAhB,CAAZ;AACA,YAAMxB,GAAG,CAACQ,OAAO,CAACc,mBAAR,CAA4BC,KAAK,CAACC,OAAlC,CAAD,CAAT;AACH;AACJ,GAtBe,CAAhB;AAuBH;;AAED,UAAUC,aAAV,GAA0B;AACtB,MAAI;AACA,UAAMxB,IAAI,CAACE,MAAD,CAAV;AACA,UAAMH,GAAG,CAACQ,OAAO,CAACkB,oBAAR,EAAD,CAAT;AACH,GAHD,CAGE,OAAOH,KAAP,EAAc;AACZ,UAAMvB,GAAG,CAACQ,OAAO,CAACmB,oBAAR,CAA6BJ,KAA7B,CAAD,CAAT;AACH;AACJ;;AAED,OAAO,UAAUK,YAAV,GAAyB;AAC5B,QAAM7B,UAAU,CAACS,OAAO,CAACa,qBAAT,EAAgC,WAAWT,OAAX,EAAoB;AAChEP,IAAAA,SAAS,CAAC,YAAD,EAAeO,OAAO,CAACK,KAAvB,CAAT;AACA,UAAMZ,SAAS,CAAC,OAAD,EAAUO,OAAO,CAACK,KAAlB,CAAf;AACH,GAHe,CAAhB;AAIH;AAED,OAAO,UAAUY,UAAV,GAAuB;AAC1B,QAAM9B,UAAU,CAACS,OAAO,CAACsB,sBAAT,EAAiC,WAAWlB,OAAX,EAAoB;AACjEmB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BpB,OAA1B;AACH,GAFe,CAAhB;AAGH;AAED,OAAO,UAAUqB,QAAV,GAAqB;AACxB,QAAMlC,UAAU,CAACS,OAAO,CAAC0B,oBAAT,EAA+BT,aAA/B,CAAhB;AACH;AAED,eAAe,UAAUU,QAAV,GAAqB;AAChC,QAAMrC,GAAG,CAAC,CAACG,IAAI,CAACS,eAAD,CAAL,EAAwBT,IAAI,CAAC2B,YAAD,CAA5B,EAA4C3B,IAAI,CAACgC,QAAD,CAAhD,CAAD,CAAT;AACH","sourcesContent":["import {all, takeLatest, put, call, fork} from 'redux-saga/effects';\nimport { logout, removeCookie, setCookie} from './auth.utils';\nimport {notification} from '@iso/components';\nimport JwtAuthentication from './jwtAuthentication';\nimport actions from './actions';\nimport jwtDecode from \"jwt-decode\";\n\n\nexport function* jwtLoginRequest() {\n    yield takeLatest(actions.JWT_LOGIN_REQUEST_START, function* ({payload: {userInfo, history}}) {\n        try {\n            const res = yield call(JwtAuthentication.login, userInfo);\n            let token, profile;\n            if (res.access) {\n                token = res.access;\n                profile = jwtDecode(res.access);\n                notification('success', 'login success');\n\n                yield put({\n                    type: actions.LOGIN_REQUEST_SUCCESS,\n                    token,\n                    profile,\n                });\n            } else {\n                notification('warning', 'Response type is invalid');\n                yield put(actions.loginRequestFailure(\"Invalid server response\"));\n            }\n        } catch (error) {\n            notification('error', error.message);\n            yield put(actions.loginRequestFailure(error.message));\n        }\n    });\n}\n\nfunction* logoutRequest() {\n    try {\n        yield call(logout);\n        yield put(actions.logoutRequestSuccess());\n    } catch (error) {\n        yield put(actions.logoutRequestFailure(error));\n    }\n}\n\nexport function* loginSuccess() {\n    yield takeLatest(actions.LOGIN_REQUEST_SUCCESS, function* (payload) {\n        setCookie('login_saga', payload.token);\n        yield setCookie('token', payload.token);\n    });\n}\n\nexport function* loginError() {\n    yield takeLatest(actions.LOGOUT_REQUEST_FAILURE, function* (payload) {\n        console.log(\"loginError\", payload)\n    });\n}\n\nexport function* onLogout() {\n    yield takeLatest(actions.LOGOUT_REQUEST_START, logoutRequest);\n}\n\nexport default function* rootSaga() {\n    yield all([call(jwtLoginRequest), call(loginSuccess), call(onLogout)]);\n}\n"]},"metadata":{},"sourceType":"module"}