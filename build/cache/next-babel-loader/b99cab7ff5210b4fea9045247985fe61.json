{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getAllAmenities),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getAmenity),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addAmenity),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(updateAmenity),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(deleteAmenity),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport actions from \"./actions\";\nimport amenityApi from \"../../service/amenityApi\";\nimport { notification } from \"@iso/components\";\nimport { Router } from \"next/router\";\nexport function getAllAmenities() {\n  return _regeneratorRuntime.wrap(function getAllAmenities$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.GET_ALL_AMENITIES_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(amenityApi.getAll);\n\n                  case 3:\n                    res = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: actions.GET_ALL_AMENITIES_SUCCESS,\n                      items: res\n                    });\n\n                  case 6:\n                    _context.next = 13;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    notification('warning', _context.t0.message);\n                    _context.next = 13;\n                    return put({\n                      type: actions.GET_ALL_AMENITIES_FAILURE,\n                      error: _context.t0.message\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\nexport function getAmenity() {\n  return _regeneratorRuntime.wrap(function getAmenity$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(actions.GET_AMENITY_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return call(amenityApi.getOne, payload.amenityId);\n\n                  case 3:\n                    res = _context3.sent;\n                    _context3.next = 6;\n                    return put({\n                      type: actions.GET_AMENITY_SUCCESS,\n                      item: res\n                    });\n\n                  case 6:\n                    _context3.next = 13;\n                    break;\n\n                  case 8:\n                    _context3.prev = 8;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    notification('warning', _context3.t0.message);\n                    _context3.next = 13;\n                    return put({\n                      type: actions.GET_AMENITY_FAILURE,\n                      error: _context3.t0.message\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee2, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function addAmenity() {\n  return _regeneratorRuntime.wrap(function addAmenity$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(actions.ADD_AMENITY_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.prev = 0;\n                    _context5.next = 3;\n                    return call(amenityApi.add, payload.amenity);\n\n                  case 3:\n                    res = _context5.sent;\n                    notification('success', 'New amenity has been created successfully');\n                    _context5.next = 7;\n                    return put({\n                      type: actions.ADD_AMENITY_SUCCESS,\n                      item: res\n                    });\n\n                  case 7:\n                    _context5.next = 14;\n                    break;\n\n                  case 9:\n                    _context5.prev = 9;\n                    _context5.t0 = _context5[\"catch\"](0);\n                    notification('warning', _context5.t0.message);\n                    _context5.next = 14;\n                    return put({\n                      type: actions.ADD_AMENITY_FAILURE,\n                      error: _context5.t0.message\n                    });\n\n                  case 14:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee3, null, [[0, 9]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function updateAmenity() {\n  return _regeneratorRuntime.wrap(function updateAmenity$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(actions.UPDATE_AMENITY_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee4$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.prev = 0;\n                    _context7.next = 3;\n                    return call(amenityApi.update, payload.amenity);\n\n                  case 3:\n                    res = _context7.sent;\n                    notification('success', 'Amenity has been updated successfully');\n                    _context7.next = 7;\n                    return put({\n                      type: actions.UPDATE_AMENITY_SUCCESS,\n                      item: res\n                    });\n\n                  case 7:\n                    _context7.next = 14;\n                    break;\n\n                  case 9:\n                    _context7.prev = 9;\n                    _context7.t0 = _context7[\"catch\"](0);\n                    notification('warning', _context7.t0.message);\n                    _context7.next = 14;\n                    return put({\n                      type: actions.UPDATE_AMENITY_FAILURE,\n                      error: _context7.t0.message\n                    });\n\n                  case 14:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee4, null, [[0, 9]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function deleteAmenity() {\n  return _regeneratorRuntime.wrap(function deleteAmenity$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeEvery(actions.DELETE_AMENITY_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee5$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    _context9.prev = 0;\n                    _context9.next = 3;\n                    return call(amenityApi[\"delete\"], payload.amenityId);\n\n                  case 3:\n                    res = _context9.sent;\n                    notification('success', 'Amenity has been deleted successfully');\n                    Router.push('/admin/amenity');\n                    _context9.next = 8;\n                    return put({\n                      type: actions.DELETE_AMENITY_SUCCESS,\n                      amenityId: payload.amenityId\n                    });\n\n                  case 8:\n                    _context9.next = 15;\n                    break;\n\n                  case 10:\n                    _context9.prev = 10;\n                    _context9.t0 = _context9[\"catch\"](0);\n                    notification('warning', _context9.t0.message);\n                    _context9.next = 15;\n                    return put({\n                      type: actions.DELETE_AMENITY_FAILURE,\n                      error: _context9.t0.message\n                    });\n\n                  case 15:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _callee5, null, [[0, 10]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked5);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([call(getAllAmenities), fork(getAmenity), fork(addAmenity), fork(updateAmenity), fork(deleteAmenity)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/redux/amenities/saga.js"],"names":["getAllAmenities","getAmenity","addAmenity","updateAmenity","deleteAmenity","rootSaga","all","takeEvery","fork","takeLatest","call","put","actions","amenityApi","notification","Router","GET_ALL_AMENITIES_REQUEST","getAll","res","type","GET_ALL_AMENITIES_SUCCESS","items","message","GET_ALL_AMENITIES_FAILURE","error","GET_AMENITY_REQUEST","payload","getOne","amenityId","GET_AMENITY_SUCCESS","item","GET_AMENITY_FAILURE","ADD_AMENITY_REQUEST","add","amenity","ADD_AMENITY_SUCCESS","ADD_AMENITY_FAILURE","UPDATE_AMENITY_REQUEST","update","UPDATE_AMENITY_SUCCESS","UPDATE_AMENITY_FAILURE","DELETE_AMENITY_REQUEST","push","DELETE_AMENITY_SUCCESS","DELETE_AMENITY_FAILURE"],"mappings":"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","sourcesContent":["import {\r\n    all,\r\n    takeEvery,\r\n    fork,\r\n    takeLatest,\r\n    call,\r\n    put,\r\n} from \"redux-saga/effects\";\r\nimport actions from \"./actions\";\r\nimport amenityApi from \"../../service/amenityApi\";\r\nimport {notification} from \"@iso/components\";\r\nimport {Router} from \"next/router\";\r\n\r\n\r\nexport function* getAllAmenities() {\r\n    yield takeLatest(actions.GET_ALL_AMENITIES_REQUEST, function* () {\r\n        try {\r\n            const res = yield call(amenityApi.getAll);\r\n            yield put({\r\n                type: actions.GET_ALL_AMENITIES_SUCCESS,\r\n                items: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.GET_ALL_AMENITIES_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* getAmenity() {\r\n    yield takeEvery(actions.GET_AMENITY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(amenityApi.getOne, payload.amenityId);\r\n            yield put({\r\n                type: actions.GET_AMENITY_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.GET_AMENITY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* addAmenity() {\r\n    yield takeEvery(actions.ADD_AMENITY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(amenityApi.add, payload.amenity);\r\n            notification('success', 'New amenity has been created successfully');\r\n\r\n            yield put({\r\n                type: actions.ADD_AMENITY_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.ADD_AMENITY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* updateAmenity() {\r\n    yield takeEvery(actions.UPDATE_AMENITY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(amenityApi.update, payload.amenity);\r\n            notification('success', 'Amenity has been updated successfully');\r\n            yield put({\r\n                type: actions.UPDATE_AMENITY_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.UPDATE_AMENITY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* deleteAmenity() {\r\n    yield takeEvery(actions.DELETE_AMENITY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(amenityApi.delete, payload.amenityId);\r\n            notification('success', 'Amenity has been deleted successfully');\r\n            Router.push('/admin/amenity')\r\n            yield put({\r\n                type: actions.DELETE_AMENITY_SUCCESS,\r\n                amenityId: payload.amenityId,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.DELETE_AMENITY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        call(getAllAmenities),\r\n        fork(getAmenity),\r\n        fork(addAmenity),\r\n        fork(updateAmenity),\r\n        fork(deleteAmenity),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}