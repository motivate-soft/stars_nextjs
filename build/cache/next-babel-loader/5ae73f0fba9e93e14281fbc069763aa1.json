{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { BACKEND_URL } from \"../env-config\";\nimport { getCookie } from \"@redux/authentication/auth.utils\";\nimport HttpsProxyAgent from \"https-proxy-agent/dist/agent\";\nconst postApi = {\n  getAll: async () => {\n    const prod = true;\n\n    if (prod) {\n      return await fetch(`${BACKEND_URL}/api/content/`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        agent: new HttpsProxyAgent('http://172.25.1.2:3129')\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n\n        throw res;\n      }).catch(handleError);\n    }\n\n    return await fetch(`${BACKEND_URL}/api/content/`, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw res;\n    }).catch(handleError);\n  },\n  getOne: async id => await fetch(`${BACKEND_URL}/api/content/${id}`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getCookie(\"token\")}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    throw res;\n  }).catch(handleError),\n  add: async (post) => await fetch(`${BACKEND_URL}/api/content/`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getCookie(\"token\")}`\n    },\n    body: JSON.stringify(post)\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    throw res;\n  }).catch(handleError),\n  update: async (post) => await fetch(`${BACKEND_URL}/api/content/${post.id}`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getCookie(\"token\")}`\n    },\n    body: JSON.stringify(post)\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    throw res;\n  }).catch(handleError),\n  delete: async (postId) => await fetch(`${BACKEND_URL}/api/content/${postId}`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getCookie(\"token\")}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      return null;\n    }\n\n    throw res;\n  }).catch(handleError)\n};\n\nconst handleError = res => {\n  if (res instanceof Error) {\n    throw Error('Network error');\n  }\n\n  let error = new Error(); // res.json().then((responseJson) => {\n  //     error = {\n  //         status: res.status,\n  //         statusText: res.statusText,\n  //         message: responseJson.detail || 'Application Error'\n  //     }\n  //     throw error\n  // })\n\n  if (res.status >= 400 && res.status < 500) {\n    console.log(res.text());\n    error = {\n      status: res.status,\n      statusText: res.statusText,\n      message: res.detail || 'Application Error'\n    };\n    throw error;\n  }\n\n  if (res.status >= 500) {\n    error = {\n      status: res.status,\n      statusText: res.statusText,\n      message: res.detail || 'Server Error'\n    };\n    throw error;\n  }\n\n  error = _objectSpread(_objectSpread({}, error), {}, {\n    status: res.status,\n    statusText: res.statusText,\n    message: res.detail || 'Error'\n  });\n  throw error;\n};\n\nexport default postApi;","map":null,"metadata":{},"sourceType":"module"}