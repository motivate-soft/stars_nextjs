{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jwtConfig from '@iso/config/jwt.config';\nimport jwtDecode from 'jwt-decode';\nlet resStatus = 0;\n\nclass JwtAuth {\n  constructor() {\n    _defineProperty(this, \"login\", async userInfo => {\n      return await fetch(jwtConfig.fetchUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userInfo)\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n\n        throw res;\n      }).catch(res => {\n        console.log(\"___\", res);\n\n        if (res instanceof Error) {\n          throw Error('Network error');\n        }\n\n        let error = new Error(); // res.json().then((responseJson) => {\n        //     error = {\n        //         status: res.status,\n        //         statusText: res.statusText,\n        //         message: responseJson.detail || 'Application Error'\n        //     }\n        //     throw error\n        // })\n\n        if (res.status >= 400 && res.status < 500) {\n          console.log(res.text());\n          error = {\n            status: res.status,\n            statusText: res.statusText,\n            message: res.detail || 'Application Error'\n          };\n          throw error;\n        }\n\n        if (res.status >= 500) {\n          error = {\n            status: res.status,\n            statusText: res.statusText,\n            message: res.detail || 'Server Error'\n          };\n          throw error;\n        }\n\n        error = _objectSpread(_objectSpread({}, error), {}, {\n          status: res.status,\n          statusText: res.statusText,\n          message: res.detail || 'Error'\n        });\n        throw error;\n      });\n    });\n  }\n\n}\n\nexport default new JwtAuth();","map":null,"metadata":{},"sourceType":"module"}