{"ast":null,"code":"import { all, takeEvery, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport actions from \"./actions\";\nimport { notification } from \"@iso/components\";\nimport propertyApi from \"../../service/propertyApi\";\nimport { Router } from \"next/router\";\nexport function* getAllProperties() {\n  yield takeLatest(actions.GET_ALL_PROPERTIES_REQUEST, function* () {\n    try {\n      const res = yield call(propertyApi.getAll);\n      console.log(\"___try\", res);\n      yield put({\n        type: actions.GET_ALL_PROPERTIES_SUCCESS,\n        items: res\n      });\n    } catch (error) {\n      console.log(\"___catch\", error);\n      yield put({\n        type: actions.GET_ALL_PROPERTIES_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* getProperty() {\n  yield takeEvery(actions.GET_PROPERTY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(propertyApi.getOne, payload.propertyId);\n      yield put({\n        type: actions.GET_PROPERTY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.GET_PROPERTY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* addProperty() {\n  yield takeEvery(actions.ADD_PROPERTY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(propertyApi.add, payload.property);\n      notification('success', 'New Property has been created successfully');\n      yield put({\n        type: actions.ADD_PROPERTY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.ADD_PROPERTY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* updateProperty() {\n  yield takeEvery(actions.UPDATE_PROPERTY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(propertyApi.update, payload.property);\n      notification('success', 'Property has been updated successfully');\n      yield put({\n        type: actions.UPDATE_PROPERTY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.UPDATE_PROPERTY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* deleteProperty() {\n  yield takeEvery(actions.DELETE_PROPERTY_REQUEST, function* (payload) {\n    try {\n      yield call(propertyApi.delete, payload.propertyId);\n      notification('success', 'Property has been deleted successfully');\n      Router.push('/admin/property');\n      yield put({\n        type: actions.DELETE_PROPERTY_SUCCESS,\n        propertyId: payload.propertyId\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.DELETE_PROPERTY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* getPriceItems() {\n  yield takeLatest(actions.GET_PRICE_ITEMS_REQUEST, function* (payload) {\n    try {\n      const res = yield call(propertyApi.getPriceItems, payload.propertyId);\n      yield put({\n        type: actions.GET_PRICE_ITEMS_SUCCESS,\n        items: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.GET_PRICE_ITEMS_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* createPriceItem() {\n  yield takeLatest(actions.CREATE_PRICE_ITEM_REQUEST, function* (payload) {\n    try {\n      const res = yield call(propertyApi.createPriceItem, payload.pricing);\n      yield put({\n        type: actions.CREATE_PRICE_ITEM_SUCCESS\n      });\n      notification('success', 'Pricing item created');\n      yield put({\n        type: actions.GET_PRICE_ITEMS_REQUEST,\n        propertyId: payload.pricing.property\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.CREATE_PRICE_ITEM_FAILURE\n      });\n    }\n  });\n}\nexport default function* rootSaga() {\n  yield all([call(getAllProperties), fork(getProperty), fork(addProperty), fork(updateProperty), fork(deleteProperty), fork(getPriceItems), fork(createPriceItem)]);\n}","map":null,"metadata":{},"sourceType":"module"}