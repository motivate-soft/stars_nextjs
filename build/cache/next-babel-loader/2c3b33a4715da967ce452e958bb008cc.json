{"ast":null,"code":"import _Layout from \"antd/lib/layout\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clone from 'clone';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Menu from '@iso/components/uielements/menu';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nimport appActions from '@iso/redux/app/actions';\nimport Logo from '@iso/components/utility/Logo.next';\nimport SidebarWrapper from './Sidebar.styles';\nimport SidebarMenu from './SidebarMenu';\nimport SIDEBAR_MENU_OPTIONS from './sidebar.navigations';\nimport { SidebarMenuLevelIcon } from '@iso/config/icon.config';\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\nconst {\n  Sider\n} = _Layout;\nconst {\n  toggleOpenDrawer,\n  changeOpenKeys,\n  changeCurrent,\n  toggleCollapsed\n} = appActions;\nexport default function Sidebar(props) {\n  const {\n    view,\n    openKeys,\n    collapsed,\n    openDrawer,\n    height,\n    current\n  } = useSelector(state => state.App);\n  const {\n    sidebarTheme\n  } = useSelector(state => state.ThemeSwitcher);\n  const dispatch = useDispatch();\n  const {\n    0: scrollheight,\n    1: setScrollheight\n  } = useState(null);\n  const {\n    0: isCollapsed,\n    1: setIsCollapsed\n  } = useState(null);\n  useEffect(() => {\n    setScrollheight(height);\n  }, [height]);\n  useEffect(() => {\n    setIsCollapsed(collapsed && !openDrawer);\n  }, [collapsed]);\n\n  function handleClick(e) {\n    dispatch(changeCurrent([e.key]));\n\n    if (view === 'MobileView') {\n      setTimeout(() => {\n        dispatch(toggleCollapsed()); // dispatch(toggleOpenDrawer());\n      }, 100);\n    }\n  }\n\n  function onOpenChange(newOpenKeys) {\n    const latestOpenKey = newOpenKeys.find(key => !(openKeys.indexOf(key) > -1));\n    const latestCloseKey = openKeys.find(key => !(newOpenKeys.indexOf(key) > -1));\n    let nextOpenKeys = [];\n\n    if (latestOpenKey) {\n      nextOpenKeys = getAncestorKeys(latestOpenKey).concat(latestOpenKey);\n    }\n\n    if (latestCloseKey) {\n      nextOpenKeys = getAncestorKeys(latestCloseKey);\n    }\n\n    dispatch(changeOpenKeys(nextOpenKeys));\n  }\n\n  const getAncestorKeys = key => {\n    const map = {\n      sub3: ['sub2']\n    };\n    return map[key] || [];\n  };\n\n  const mode = isCollapsed === true ? 'vertical' : 'inline';\n  const styling = {\n    backgroundColor: sidebarTheme.backgroundColor\n  };\n  const submenuStyle = {\n    backgroundColor: 'rgba(0,0,0,0.3)',\n    color: sidebarTheme.textColor\n  };\n  const submenuColor = {\n    color: sidebarTheme.textColor\n  };\n\n  const onMouseEnter = () => {\n    if (collapsed && openDrawer === false) {\n      dispatch(toggleOpenDrawer());\n    }\n\n    return;\n  };\n\n  const onMouseLeave = () => {\n    if (collapsed && openDrawer === true) {\n      dispatch(toggleOpenDrawer());\n    }\n\n    return;\n  };\n\n  return __jsx(SidebarWrapper, null, __jsx(Sider, {\n    trigger: null,\n    collapsible: true,\n    collapsed: isCollapsed,\n    width: 240,\n    className: \"isomorphicSidebar\",\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    style: styling\n  }, __jsx(Logo, {\n    collapsed: isCollapsed\n  }), __jsx(Scrollbars, {\n    style: {\n      height: scrollheight - 70\n    }\n  }, __jsx(Menu, {\n    onClick: handleClick,\n    theme: \"dark\",\n    mode: mode,\n    openKeys: isCollapsed ? [] : openKeys,\n    selectedKeys: current,\n    onOpenChange: onOpenChange,\n    className: \"isoDashboardMenu\" // inlineCollapsed={isCollapsed}\n\n  }, SIDEBAR_MENU_OPTIONS.map(option => __jsx(SidebarMenu, {\n    key: option.key,\n    item: option,\n    submenuColor: submenuColor,\n    submenuStyle: submenuStyle\n  }))))));\n}","map":null,"metadata":{},"sourceType":"module"}