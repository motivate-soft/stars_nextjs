{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getAllUsers),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getUser),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addUser),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(updateUser),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(deleteUser),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, fork, takeLatest, call, put } from 'redux-saga/effects';\nimport actions from './actions';\nimport { notification } from \"@iso/components\";\nimport userApi from \"../../service/userApi\";\nimport { Router } from \"next/router\";\nexport function getAllUsers() {\n  return _regeneratorRuntime.wrap(function getAllUsers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.GET_ALL_USERS_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(userApi.getAll);\n\n                  case 3:\n                    res = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: actions.GET_ALL_USERS_SUCCESS,\n                      items: res\n                    });\n\n                  case 6:\n                    _context.next = 13;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    notification('warning', _context.t0.message);\n                    _context.next = 13;\n                    return put({\n                      type: actions.GET_ALL_USERS_FAILURE,\n                      error: _context.t0.message\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\nexport function getUser() {\n  return _regeneratorRuntime.wrap(function getUser$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(actions.GET_USER_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return call(userApi.getOne, payload.userId);\n\n                  case 3:\n                    res = _context3.sent;\n                    _context3.next = 6;\n                    return put({\n                      type: actions.GET_USER_SUCCESS,\n                      item: res\n                    });\n\n                  case 6:\n                    _context3.next = 12;\n                    break;\n\n                  case 8:\n                    _context3.prev = 8;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    _context3.next = 12;\n                    return put({\n                      type: actions.GET_USER_FAILURE,\n                      error: error.message\n                    });\n\n                  case 12:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee2, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function addUser() {\n  return _regeneratorRuntime.wrap(function addUser$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(actions.ADD_USER_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.prev = 0;\n                    _context5.next = 3;\n                    return call(userApi.add, payload.user);\n\n                  case 3:\n                    res = _context5.sent;\n                    notification('success', 'New user created successfully!');\n                    _context5.next = 7;\n                    return put({\n                      type: actions.ADD_USER_REQUEST,\n                      item: res\n                    });\n\n                  case 7:\n                    _context5.next = 14;\n                    break;\n\n                  case 9:\n                    _context5.prev = 9;\n                    _context5.t0 = _context5[\"catch\"](0);\n                    notification('warning', error.message);\n                    _context5.next = 14;\n                    return put({\n                      type: actions.ADD_USER_FAILURE,\n                      error: error.message\n                    });\n\n                  case 14:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee3, null, [[0, 9]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function updateUser() {\n  return _regeneratorRuntime.wrap(function updateUser$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(actions.UPDATE_USER_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee4$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.prev = 0;\n                    _context7.next = 3;\n                    return call(userApi.update, payload.user);\n\n                  case 3:\n                    res = _context7.sent;\n                    notification('success', 'User has been updated successfully!');\n                    _context7.next = 7;\n                    return put({\n                      type: actions.UPDATE_USER_SUCCESS,\n                      item: res\n                    });\n\n                  case 7:\n                    _context7.next = 14;\n                    break;\n\n                  case 9:\n                    _context7.prev = 9;\n                    _context7.t0 = _context7[\"catch\"](0);\n                    notification('warning', _context7.t0.message);\n                    _context7.next = 14;\n                    return put({\n                      type: actions.UPDATE_USER_FAILURE,\n                      error: _context7.t0.message\n                    });\n\n                  case 14:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee4, null, [[0, 9]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function deleteUser() {\n  return _regeneratorRuntime.wrap(function deleteUser$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeEvery(actions.DELETE_USER_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee5$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    _context9.prev = 0;\n                    _context9.next = 3;\n                    return call(userApi[\"delete\"], payload.userId);\n\n                  case 3:\n                    res = _context9.sent;\n                    notification('success', 'User has been deleted successfully!');\n                    Router.push('/admin/user');\n                    _context9.next = 8;\n                    return put({\n                      type: actions.DELETE_USER_SUCCESS,\n                      item: res\n                    });\n\n                  case 8:\n                    _context9.next = 15;\n                    break;\n\n                  case 10:\n                    _context9.prev = 10;\n                    _context9.t0 = _context9[\"catch\"](0);\n                    notification('warning', _context9.t0.message);\n                    _context9.next = 15;\n                    return put({\n                      type: actions.UPDATE_USER_FAILURE,\n                      error: _context9.t0.message\n                    });\n\n                  case 15:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _callee5, null, [[0, 10]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked5);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([call(getAllUsers), fork(getUser), fork(addUser), fork(updateUser), fork(deleteUser)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/redux/users/saga.js"],"names":["getAllUsers","getUser","addUser","updateUser","deleteUser","rootSaga","all","takeEvery","fork","takeLatest","call","put","actions","notification","userApi","Router","GET_ALL_USERS_REQUEST","getAll","res","type","GET_ALL_USERS_SUCCESS","items","message","GET_ALL_USERS_FAILURE","error","GET_USER_REQUEST","payload","getOne","userId","GET_USER_SUCCESS","item","GET_USER_FAILURE","ADD_USER_REQUEST","add","user","ADD_USER_FAILURE","UPDATE_USER_REQUEST","update","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","DELETE_USER_REQUEST","push","DELETE_USER_SUCCESS"],"mappings":"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","sourcesContent":["import {all, takeEvery, fork, takeLatest, call, put} from 'redux-saga/effects';\r\nimport actions from './actions';\r\nimport {notification} from \"@iso/components\";\r\nimport userApi from \"../../service/userApi\";\r\nimport {Router} from \"next/router\";\r\n\r\nexport function* getAllUsers() {\r\n    yield takeLatest(actions.GET_ALL_USERS_REQUEST, function* () {\r\n        try {\r\n            const res = yield call(userApi.getAll);\r\n            yield put({\r\n                type: actions.GET_ALL_USERS_SUCCESS,\r\n                items: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message)\r\n            yield put({\r\n                type: actions.GET_ALL_USERS_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* getUser() {\r\n    yield takeEvery(actions.GET_USER_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(userApi.getOne, payload.userId);\r\n            yield put({\r\n                type: actions.GET_USER_SUCCESS,\r\n                item: res\r\n            })\r\n        } catch (e) {\r\n            yield put({\r\n                type: actions.GET_USER_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* addUser() {\r\n    yield takeEvery(actions.ADD_USER_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(userApi.add, payload.user);\r\n            notification('success', 'New user created successfully!')\r\n            yield put({\r\n                type: actions.ADD_USER_REQUEST,\r\n                item: res\r\n            })\r\n        } catch (e) {\r\n            notification('warning', error.message)\r\n            yield put({\r\n                type: actions.ADD_USER_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* updateUser() {\r\n    yield takeEvery(actions.UPDATE_USER_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(userApi.update, payload.user);\r\n            notification('success', 'User has been updated successfully!')\r\n            yield put({\r\n                type: actions.UPDATE_USER_SUCCESS,\r\n                item: res\r\n            })\r\n        } catch (error) {\r\n            notification('warning', error.message)\r\n            yield put({\r\n                type: actions.UPDATE_USER_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* deleteUser() {\r\n    yield takeEvery(actions.DELETE_USER_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(userApi.delete, payload.userId);\r\n            notification('success', 'User has been deleted successfully!')\r\n            Router.push('/admin/user')\r\n            yield put({\r\n                type: actions.DELETE_USER_SUCCESS,\r\n                item: res\r\n            })\r\n        } catch (error) {\r\n            notification('warning', error.message)\r\n            yield put({\r\n                type: actions.UPDATE_USER_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([call(getAllUsers), fork(getUser), fork(addUser), fork(updateUser), fork(deleteUser)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}