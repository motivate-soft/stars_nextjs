{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\n// import ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport \"react-quill/dist/quill.bubble.css\";\nimport \"react-quill/dist/quill.core.css\";\nimport EditorWrapper from \"./styles/editor.style\";\nvar ReactQuill = true ? require('react-quill') : function () {\n  return false;\n};\n\nvar Editor = /*#__PURE__*/function (_React$Component) {\n  _inherits(Editor, _React$Component);\n\n  var _super = _createSuper(Editor);\n\n  function Editor(props) {\n    var _this;\n\n    _classCallCheck(this, Editor);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      editorHtml: \"\",\n      theme: \"snow\"\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Editor, [{\n    key: \"handleChange\",\n    value: function handleChange(html) {\n      this.setState({\n        editorHtml: html\n      });\n      this.props.onEditorStateChange(html);\n    }\n  }, {\n    key: \"handleThemeChange\",\n    value: function handleThemeChange(newTheme) {\n      if (newTheme === \"core\") newTheme = null;\n      this.setState({\n        theme: newTheme\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(EditorWrapper, null, __jsx(ReactQuill, {\n        theme: this.state.theme,\n        onChange: this.handleChange,\n        value: this.state.editorHtml,\n        modules: Editor.modules,\n        formats: Editor.formats,\n        bounds: \".app\",\n        placeholder: this.props.placeholder\n      }));\n    }\n  }]);\n\n  return Editor;\n}(React.Component);\n/*\n * Quill modules to attach to editor\n * See https://quilljs.com/docs/modules/ for complete options\n */\n\n\nEditor.modules = {\n  toolbar: [// [{ header: '1' }, { header: '2' }, { font: [] }],\n  // [{ size: [] }],\n  [{\n    size: [\"small\", false, \"large\", \"huge\"]\n  }], // custom dropdown\n  [{\n    header: [1, 2, 3, 4, 5, 6, false]\n  }], [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"], [{\n    list: \"ordered\"\n  }, {\n    list: \"bullet\"\n  }, {\n    indent: \"-1\"\n  }, {\n    indent: \"+1\"\n  }], [\"link\", \"image\", \"video\"], [\"clean\"], [{\n    color: []\n  }, {\n    background: []\n  }], // dropdown with defaults from theme\n  [{\n    font: []\n  }], [{\n    align: []\n  }]],\n  clipboard: {\n    // toggle to add extra line breaks when pasting HTML:\n    matchVisual: false\n  }\n};\n/*\n * Quill editor formats\n * See https://quilljs.com/docs/formats/\n */\n\nEditor.formats = [\"header\", \"font\", \"size\", \"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\", \"list\", \"bullet\", \"indent\", \"link\", \"image\", \"video\"];\n/*\n * PropType validation\n */\n\nexport default Editor;","map":null,"metadata":{},"sourceType":"module"}