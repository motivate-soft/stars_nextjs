{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _Modal from \"antd/lib/modal\";\nimport _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _Button from \"antd/lib/button\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from \"react\";\nimport Box from \"@iso/ui/Box/Box\";\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { BACKEND_URL } from \"../../../../env-config\";\nimport { getCookie } from \"@redux/authentication/auth.utils\";\nimport { notification } from \"@iso/components\";\nvar cropSetting = {\n  unit: '%',\n  width: 80,\n  height: 40 // aspect: 16 / 9,\n\n};\nexport default function CropImage(props) {\n  var imageTitle = props.imageTitle,\n      imagePath = props.imagePath,\n      onUploadSuccess = props.onUploadSuccess;\n\n  var _useState = useState(cropSetting),\n      crop = _useState[0],\n      setCrop = _useState[1];\n\n  var _useState2 = useState(null),\n      croppedImage = _useState2[0],\n      setCroppedImage = _useState2[1];\n\n  var _useState3 = useState(false),\n      visible = _useState3[0],\n      setVisible = _useState3[1];\n\n  var imageRef = useRef(null);\n\n  function showModal() {\n    setVisible(true);\n  }\n\n  function handleCancel() {\n    setVisible(false);\n  }\n\n  function onImageLoaded(image) {\n    imageRef.current = image;\n    console.log(\"onImageLoaded\", imageRef);\n  }\n\n  function onCropComplete(crop) {\n    makeClientCrop(crop);\n  }\n\n  function onCropChange(crop, percentCrop) {\n    setCrop(crop);\n  }\n\n  function makeClientCrop(_x) {\n    return _makeClientCrop.apply(this, arguments);\n  }\n\n  function _makeClientCrop() {\n    _makeClientCrop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(crop) {\n      var newCroppedImage;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(imageRef.current && crop.width && crop.height)) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 3;\n              return getCroppedImg(imageRef.current, crop, 'crop.jpeg');\n\n            case 3:\n              newCroppedImage = _context.sent;\n              setCroppedImage(newCroppedImage);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _makeClientCrop.apply(this, arguments);\n  }\n\n  function getCroppedImg(image, crop, fileName) {\n    var canvas = document.createElement('canvas');\n    var scaleX = image.naturalWidth / image.width;\n    var scaleY = image.naturalHeight / image.height;\n    canvas.width = Math.ceil(crop.width * scaleX);\n    canvas.height = Math.ceil(crop.height * scaleY);\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width * scaleX, crop.height * scaleY);\n    return canvas.toDataURL('image/jpeg'); // return new Promise((resolve, reject) => {\n    //     canvas.toBlob(blob => {\n    //         if (!blob) {\n    //             //reject(new Error('Canvas is empty'))\n    //             console.error('Canvas is empty')\n    //             return\n    //         }\n    //         blob.name = fileName\n    //         window.URL.revokeObjectURL(fileUrl)\n    //         fileUrl = window.URL.createObjectURL(blob)\n    //         resolve(fileUrl)\n    //     }, 'image/jpeg')\n    // })\n  }\n\n  function handleSaveCroppedImage(image) {\n    setVisible(false);\n    var media = {\n      title: imageTitle,\n      imageData: croppedImage\n    };\n    fetch(\"\".concat(BACKEND_URL, \"/api/media/create\"), {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \".concat(getCookie(\"token\"))\n      },\n      body: JSON.stringify(media)\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      console.log(\"handleSaveCroppedImage\", res);\n      onUploadSuccess(res);\n      notification('success', 'Cropped image saved!');\n    })[\"catch\"](function (error) {\n      return error;\n    });\n  } // function handleDeleteImage(id) {\n  // }\n\n\n  return __jsx(\"div\", null, __jsx(_Button, {\n    type: \"primary\",\n    onClick: showModal\n  }, \"Crop\"), __jsx(_Modal, {\n    visible: visible,\n    className: \"crop-modal\",\n    title: \"Crop image\",\n    okText: \"Save\",\n    onOk: handleSaveCroppedImage,\n    onCancel: handleCancel // footer={[\n    //     <Button key=\"save\" type=\"primary\" onClick={handleSaveCroppedImage}>\n    //         Save\n    //     </Button>,\n    //     <Button\n    //         key=\"cancel\"\n    //         type=\"default\"\n    //         onClick={handleCancel}\n    //     >\n    //         Cancel\n    //     </Button>,\n    // ]}\n\n  }, __jsx(Box, null, __jsx(_Row, null, __jsx(_Col, {\n    sm: 16\n  }, imagePath && __jsx(ReactCrop, {\n    className: \"d-block mx-auto\",\n    src: imagePath,\n    crossorigin: \"*\",\n    crop: crop,\n    ruleOfThirds: true,\n    onImageLoaded: onImageLoaded,\n    onComplete: onCropComplete,\n    onChange: onCropChange\n  })), __jsx(_Col, {\n    sm: 8\n  }, croppedImage && __jsx(\"img\", {\n    alt: \"Crop\",\n    style: {\n      width: '100%'\n    },\n    crossOrigin: \"*\",\n    src: croppedImage\n  }))))));\n}","map":null,"metadata":{},"sourceType":"module"}