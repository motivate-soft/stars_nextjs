{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Head from \"next/head\";\nimport GuestLayout from \"../containers/Guest/GuestLayout/GuestLayout\";\nimport { BACKEND_URL } from \"../env-config\";\nimport PropertyListing from \"@components/Guest/Listing/PropertyListing\"; // import qs from 'query-string';\n\nexport default function PropertyListingPage(props) {\n  const {\n    properties,\n    categories,\n    category\n  } = props;\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Property Listing | Stars of Boston\")), __jsx(GuestLayout, null, __jsx(PropertyListing, {\n    items: properties,\n    categories: categories,\n    category: category\n  })));\n}\nexport async function getServerSideProps({\n  query\n}) {\n  let queryString = '',\n      category,\n      properties,\n      categories;\n\n  for (let key in query) {\n    if (queryString !== '') {\n      queryString += '&';\n    }\n\n    queryString += key + '=' + encodeURIComponent(query[key]);\n  }\n\n  try {\n    // let res = await fetch(`${BACKEND_URL}/api/accommodation/property/listing?${qs.stringify(query)}`);\n    properties = await fetch(`${BACKEND_URL}/api/accommodation/property/listing?${queryString}`).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      console.log(\"__res\", res);\n      throw Error('Server error');\n    }).catch(error => {\n      console.log(\"__err\", error);\n      throw Error('Server error');\n    });\n  } catch (e) {\n    properties = [];\n  }\n\n  try {\n    categories = await fetch(`${BACKEND_URL}/api/accommodation/category/`, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw Error('Server error');\n    });\n  } catch (e) {\n    categories = [];\n  }\n\n  category = query.category || null;\n  console.log(\"__BACKEND_URL__\", BACKEND_URL);\n  console.log(\"__propertyListing__\", properties, categories, category);\n  return {\n    props: {\n      properties,\n      categories,\n      category\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}