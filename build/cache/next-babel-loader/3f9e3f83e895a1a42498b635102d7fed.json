{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Dropzone from \"@iso/components/uielements/dropzone\";\nimport { notification } from \"@iso/components\";\nimport Box from \"@iso/components/utility/box\";\nimport LayoutWrapper from \"@iso/components/utility/layoutWrapper\";\nimport ContentHolder from \"@iso/components/utility/contentHolder\";\nimport DropzoneWrapper from \"./Dropzone.styles\";\nimport { getCookie } from \"@redux/authentication/auth.utils\";\nimport { BACKEND_URL } from \"../../../../env-config\";\nexport default (function (props) {\n  var onUploadSuccess = props.onUploadSuccess;\n  var componentConfig = {\n    iconFiletypes: [\".jpg\", \".png\", \".gif\"],\n    method: true,\n    showFiletypeIcon: true,\n    uploadMultiple: false,\n    maxFilesize: 2,\n    // MB\n    maxFiles: 2,\n    dictMaxFilesExceeded: \"You can only upload upto 2 images\",\n    dictRemoveFile: \"Delete\",\n    dictCancelUploadConfirmation: \"Are you sure to cancel upload?\",\n    postUrl: \"no-url\"\n  };\n  var djsConfig = {\n    autoProcessQueue: false\n  };\n  var eventHandlers = {\n    addedfile: function addedfile(file) {\n      return onAddedFile(file);\n    },\n    success: function success(file) {\n      return notification(\"success\", \"\".concat(file.name, \" successfully uploaded\"));\n    },\n    error: function error(_error) {\n      return notification(\"error\", \"Server is not set in the demo\");\n    }\n  };\n\n  function onAddedFile(_x) {\n    return _onAddedFile.apply(this, arguments);\n  } // async function handleAddImage(selectedFiles) {\n  //   if (selectedFiles[0].size > 1024 * 1024 * 10) {\n  //     setError(\"You can only upload files smaller than 10MB.\");\n  //     return;\n  //   }\n  //   if (selectedFiles[0].type.indexOf(\"image\") === -1) {\n  //     setError(\"You can only upload image files.\");\n  //     return;\n  //   }\n  //   let files = new FormData();\n  //   files.append(\"fileToUpload\", selectedFiles[0]);\n  //   setIsUploadingAttachment(true);\n  //   try {\n  //     const response = await postFile(\n  //       `/api/v2/services/${activeService.id}/image`,\n  //       files\n  //     );\n  //     const { imagePath } = response;\n  //     const newServices = services.map((service) => {\n  //       if (service.id === activeService.id) {\n  //         service.imagePath = imagePath;\n  //       }\n  //       return service;\n  //     });\n  //     onImageChange(newServices);\n  //     setIsUploadingAttachment(false);\n  //   } catch (errorMessage) {\n  //     setError(errorMessage);\n  //     setIsUploadingAttachment(false);\n  //   }\n  // }\n  // async function handleDeleteImage() {\n  //   setIsDeletingAttachment(true);\n  //   setError(null);\n  //   try {\n  //     await remove(`/api/v2/services/${activeService.id}/image`);\n  //     const newServices = services.map((service) => {\n  //       if (service.id === activeService.id) {\n  //         service.imagePath = null;\n  //       }\n  //       return service;\n  //     });\n  //     setIsDeletingAttachment(false);\n  //     onImageChange(newServices);\n  //   } catch (errorMessage) {\n  //     setIsDeletingAttachment(false);\n  //     setError(\n  //       \"There was an error deleting this file, please try again. If the problem persists, please contact us.\"\n  //     );\n  //   }\n  // }\n\n\n  function _onAddedFile() {\n    _onAddedFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n      var body, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              notification(\"success\", \"\".concat(file.name, \" added\"));\n              body = new FormData();\n              body.append(\"file\", file);\n              _context.next = 5;\n              return fetch(\"\".concat(BACKEND_URL, \"/api/media/create\"), {\n                method: \"POST\",\n                headers: {\n                  Authorization: \"Bearer \" + getCookie(\"token\")\n                },\n                body: body\n              }).then(function (res) {\n                return res.json();\n              }).then(function (res) {\n                return res;\n              })[\"catch\"](function (error) {\n                return error;\n              });\n\n            case 5:\n              res = _context.sent;\n              onUploadSuccess(res);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _onAddedFile.apply(this, arguments);\n  }\n\n  return __jsx(LayoutWrapper, null, __jsx(Box, null, __jsx(ContentHolder, null, __jsx(DropzoneWrapper, null, __jsx(Dropzone, {\n    config: componentConfig,\n    eventHandlers: eventHandlers,\n    djsConfig: djsConfig\n  })))));\n});","map":null,"metadata":{},"sourceType":"module"}