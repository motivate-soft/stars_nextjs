{"ast":null,"code":"import { all, takeLatest, put, call, fork } from 'redux-saga/effects';\nimport { logout, removeCookie, setCookie } from './auth.utils';\nimport { notification } from '@iso/components';\nimport JwtAuthentication from './jwtAuthentication';\nimport actions from './actions';\nimport jwtDecode from \"jwt-decode\";\nexport function* jwtLoginRequest() {\n  yield takeLatest(actions.JWT_LOGIN_REQUEST_START, function* ({\n    payload: {\n      userInfo,\n      history\n    }\n  }) {\n    try {\n      const res = yield call(JwtAuthentication.login, userInfo);\n      let token, profile;\n\n      if (res.access) {\n        token = res.access;\n        profile = jwtDecode(res.access);\n        notification('success', 'login success');\n        yield put({\n          type: actions.LOGIN_REQUEST_SUCCESS,\n          token,\n          profile\n        });\n      } else {\n        notification('warning', 'Response type is invalid');\n        yield put(actions.loginRequestFailure(\"Invalid server response\"));\n      }\n    } catch (error) {\n      notification('error', error.message);\n      yield put(actions.loginRequestFailure(error.message));\n    }\n  });\n}\n\nfunction* logoutRequest() {\n  try {\n    yield call(logout);\n    yield put(actions.logoutRequestSuccess());\n  } catch (error) {\n    yield put(actions.logoutRequestFailure(error));\n  }\n}\n\nexport function* loginSuccess() {\n  yield takeLatest(actions.LOGIN_REQUEST_SUCCESS, function* (payload) {\n    setCookie('login_saga', payload.token);\n    yield setCookie('token', payload.token);\n  });\n}\nexport function* loginError() {\n  yield takeLatest(actions.LOGOUT_REQUEST_FAILURE, function* (payload) {\n    console.log(\"loginError\", payload);\n  });\n}\nexport function* onLogout() {\n  yield takeLatest(actions.LOGOUT_REQUEST_START, logoutRequest);\n}\nexport default function* rootSaga() {\n  yield all([call(jwtLoginRequest), call(loginSuccess), call(onLogout)]);\n}","map":null,"metadata":{},"sourceType":"module"}