{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jwtConfig from '@iso/config/jwt.config';\nimport jwtDecode from 'jwt-decode';\nlet resStatus = 0;\n\nclass JwtAuth {\n  constructor() {\n    _defineProperty(this, \"login\", async userInfo => {\n      return await fetch(jwtConfig.fetchUrl, {\n        method: 'post',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userInfo)\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        }\n\n        throw res;\n      }).catch(res => {\n        console.log(\"___\", res);\n\n        if (res instanceof Error) {\n          throw Error('Network error');\n        }\n\n        let error = new Error(); // res.json().then((responseJson) => {\n        //     error = {\n        //         status: res.status,\n        //         statusText: res.statusText,\n        //         message: responseJson.detail || 'Application Error'\n        //     }\n        //     throw error\n        // })\n\n        if (res.status >= 400 && res.status < 500) {\n          console.log(res.text());\n          error = {\n            status: res.status,\n            statusText: res.statusText,\n            message: res.detail || 'Application Error'\n          };\n          throw error;\n        }\n\n        if (res.status >= 500) {\n          error = {\n            status: res.status,\n            statusText: res.statusText,\n            message: res.detail || 'Server Error'\n          };\n          throw error;\n        }\n\n        error = _objectSpread(_objectSpread({}, error), {}, {\n          status: res.status,\n          statusText: res.statusText,\n          message: res.detail || 'Error'\n        });\n        throw error;\n      });\n    });\n  }\n\n}\n\nexport default new JwtAuth();","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/redux/authentication/jwtAuthentication.js"],"names":["jwtConfig","jwtDecode","resStatus","JwtAuth","userInfo","fetch","fetchUrl","method","headers","Accept","body","JSON","stringify","then","res","ok","json","catch","console","log","Error","error","status","text","statusText","message","detail"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,IAAIC,SAAS,GAAG,CAAhB;;AAEA,MAAMC,OAAN,CAAc;AAAA;AAAA,mCACF,MAAMC,QAAN,IAAkB;AACtB,aAAO,MAAMC,KAAK,CAACL,SAAS,CAACM,QAAX,EAAqB;AACnCC,QAAAA,MAAM,EAAE,MAD2B;AAEnCC,QAAAA,OAAO,EAAE;AACLC,UAAAA,MAAM,EAAE,kBADH;AAEL,0BAAgB;AAFX,SAF0B;AAMnCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,QAAf;AAN6B,OAArB,CAAL,CAQRS,IARQ,CAQHC,GAAG,IAAI;AACT,YAAIA,GAAG,CAACC,EAAR,EAAY;AACR,iBAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;;AACD,cAAMF,GAAN;AACH,OAbQ,EAcRG,KAdQ,CAcFH,GAAG,IAAI;AACVI,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBL,GAAnB;;AACA,YAAIA,GAAG,YAAYM,KAAnB,EAA0B;AACtB,gBAAMA,KAAK,CAAC,eAAD,CAAX;AACH;;AAED,YAAIC,KAAK,GAAG,IAAID,KAAJ,EAAZ,CANU,CAOV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,YAAIN,GAAG,CAACQ,MAAJ,IAAc,GAAd,IAAqBR,GAAG,CAACQ,MAAJ,GAAa,GAAtC,EAA2C;AACvCJ,UAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACS,IAAJ,EAAZ;AACAF,UAAAA,KAAK,GAAG;AACJC,YAAAA,MAAM,EAAER,GAAG,CAACQ,MADR;AAEJE,YAAAA,UAAU,EAAEV,GAAG,CAACU,UAFZ;AAGJC,YAAAA,OAAO,EAAEX,GAAG,CAACY,MAAJ,IAAc;AAHnB,WAAR;AAKA,gBAAML,KAAN;AACH;;AAED,YAAIP,GAAG,CAACQ,MAAJ,IAAc,GAAlB,EAAuB;AACnBD,UAAAA,KAAK,GAAG;AACJC,YAAAA,MAAM,EAAER,GAAG,CAACQ,MADR;AAEJE,YAAAA,UAAU,EAAEV,GAAG,CAACU,UAFZ;AAGJC,YAAAA,OAAO,EAAEX,GAAG,CAACY,MAAJ,IAAc;AAHnB,WAAR;AAKA,gBAAML,KAAN;AACH;;AAEDA,QAAAA,KAAK,mCACEA,KADF;AAEDC,UAAAA,MAAM,EAAER,GAAG,CAACQ,MAFX;AAGDE,UAAAA,UAAU,EAAEV,GAAG,CAACU,UAHf;AAIDC,UAAAA,OAAO,EAAEX,GAAG,CAACY,MAAJ,IAAc;AAJtB,UAAL;AAMA,cAAML,KAAN;AACH,OAvDQ,CAAb;AAwDH,KA1DS;AAAA;;AAAA;;AA6Dd,eAAe,IAAIlB,OAAJ,EAAf","sourcesContent":["import jwtConfig from '@iso/config/jwt.config';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nlet resStatus = 0\r\n\r\nclass JwtAuth {\r\n    login = async userInfo => {\r\n        return await fetch(jwtConfig.fetchUrl, {\r\n            method: 'post',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(userInfo),\r\n        })\r\n            .then(res => {\r\n                if (res.ok) {\r\n                    return res.json()\r\n                }\r\n                throw res;\r\n            })\r\n            .catch(res => {\r\n                console.log(\"___\", res)\r\n                if (res instanceof Error) {\r\n                    throw Error('Network error');\r\n                }\r\n\r\n                let error = new Error();\r\n                // res.json().then((responseJson) => {\r\n                //     error = {\r\n                //         status: res.status,\r\n                //         statusText: res.statusText,\r\n                //         message: responseJson.detail || 'Application Error'\r\n                //     }\r\n                //     throw error\r\n                // })\r\n                if (res.status >= 400 && res.status < 500) {\r\n                    console.log(res.text())\r\n                    error = {\r\n                        status: res.status,\r\n                        statusText: res.statusText,\r\n                        message: res.detail || 'Application Error'\r\n                    }\r\n                    throw error\r\n                }\r\n\r\n                if (res.status >= 500) {\r\n                    error = {\r\n                        status: res.status,\r\n                        statusText: res.statusText,\r\n                        message: res.detail || 'Server Error'\r\n                    }\r\n                    throw error\r\n                }\r\n\r\n                error = {\r\n                    ...error,\r\n                    status: res.status,\r\n                    statusText: res.statusText,\r\n                    message: res.detail || 'Error'\r\n                }\r\n                throw error\r\n            });\r\n    };\r\n}\r\n\r\nexport default new JwtAuth();\r\n"]},"metadata":{},"sourceType":"module"}