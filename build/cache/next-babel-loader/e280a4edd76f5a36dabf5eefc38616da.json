{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport moment from \"moment\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport ModalEvents from \"./ModalEvents\";\nimport notification from \"@iso/components/Notification\";\nimport propertyActions from \"@redux/properties/actions\";\nimport { CalendarStyleWrapper } from \"./Calendar.styles\";\nconst Localizer = momentLocalizer(moment);\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\nexport default function PricingCalendar(props) {\n  const {\n    propertyId,\n    defaultPrice\n  } = props;\n  const {\n    0: pricingItems,\n    1: setPricingItems\n  } = useState([]);\n  const {\n    0: modalVisible,\n    1: setModalVisible\n  } = useState(false);\n  const {\n    0: modalData,\n    1: setModalData\n  } = useState(null);\n  const dispatch = useDispatch();\n  const {\n    selectedItem\n  } = useSelector(state => state.Properties);\n  useEffect(() => {\n    getPricingData(propertyId);\n  }, []);\n  useEffect(() => {\n    if (selectedItem.pricingItems) {\n      const newItems = selectedItem.pricingItems.map((item, index) => ({\n        price: item.price,\n        allDay: true,\n        start: item.start_date,\n        end: item.end_date\n      }));\n      setPricingItems(newItems);\n      console.log(\"selectedItem\", newItems, pricingItems);\n    }\n  }, [selectedItem]);\n\n  async function getPricingData() {\n    dispatch(propertyActions.getPriceItems(propertyId));\n  }\n\n  const handleSlotSelection = ({\n    start,\n    end,\n    action\n  }) => {\n    setModalVisible(true);\n    setModalData({\n      price: defaultPrice,\n      start: convertDate(start),\n      end: convertDate(end)\n    });\n  };\n\n  const convertDate = date => {\n    const offset = date.getTimezoneOffset();\n    console.log(\"offset\", offset);\n    const newDate = new Date(date.getTime() - offset * 60 * 1000);\n    return newDate.toISOString().split(\"T\")[0];\n  };\n\n  const handleChangeModalData = (type, modalData) => {\n    if (type === \"cancel\") {\n      setModalVisible(false);\n      setModalData(null);\n    } else if (type === \"delete\") {// some logic to delete pricing item\n    } else if (type === \"updateValue\") {\n      console.log(\"updateValue\", modalData);\n      setModalData({\n        price: modalData.price,\n        start: modalData.start,\n        end: modalData.end\n      });\n    } else {\n      dispatch(propertyActions.createPriceItem({\n        start_date: modalData.start,\n        end_date: modalData.end,\n        price: modalData.price,\n        property: propertyId\n      }, dispatch));\n      setModalVisible(false);\n    }\n  };\n\n  return __jsx(CalendarStyleWrapper, {\n    className: \"isomorphicCalendarWrapper\"\n  }, __jsx(ModalEvents, {\n    modalVisible: modalVisible,\n    modalData: modalData,\n    onModalDataChange: handleChangeModalData\n  }), __jsx(Calendar // className=\"isomorphicCalendar\"\n  // selectable\n  // localizer={Localizer}\n  // onView={onView}\n  // defaultView=\"month\"\n  // step={60}\n  , {\n    selectable: true,\n    resizable: true,\n    events: pricingItems,\n    views: [\"month\"],\n    defaultDate: new Date(),\n    defaultView: \"month\",\n    toolbar: true,\n    localizer: Localizer,\n    step: 30,\n    components: {\n      month: {\n        dateHeader: ({\n          date,\n          label\n        }) => {\n          let pricingItem = pricingItems.find(item => moment(date).isBetween(moment(item.start), moment(item.end), null, \"[]\"));\n          return __jsx(\"div\", {\n            className: \"calendar-date-cell\"\n          }, __jsx(\"h4\", null, moment(date).date()), __jsx(\"h6\", null, \"$\", \" \", pricingItem !== undefined ? pricingItem.price : defaultPrice));\n        }\n      }\n    },\n    onSelectSlot: handleSlotSelection\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}