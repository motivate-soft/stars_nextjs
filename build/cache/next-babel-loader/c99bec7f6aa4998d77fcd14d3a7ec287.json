{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(jwtLoginRequest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logoutRequest),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loginSuccess),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loginError),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(onLogout),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeLatest, put, call, fork } from 'redux-saga/effects';\nimport { logout, removeCookie, setCookie } from './auth.utils';\nimport { notification } from '@iso/components';\nimport JwtAuthentication from './jwtAuthentication';\nimport actions from './actions';\nimport jwtDecode from \"jwt-decode\";\nexport function jwtLoginRequest() {\n  return _regeneratorRuntime.wrap(function jwtLoginRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.JWT_LOGIN_REQUEST_START, /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n            var _ref$payload, userInfo, history, res, token, profile;\n\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _ref$payload = _ref.payload, userInfo = _ref$payload.userInfo, history = _ref$payload.history;\n                    _context.prev = 1;\n                    _context.next = 4;\n                    return call(JwtAuthentication.login, userInfo);\n\n                  case 4:\n                    res = _context.sent;\n\n                    if (!res.access) {\n                      _context.next = 13;\n                      break;\n                    }\n\n                    token = res.access;\n                    profile = jwtDecode(res.access);\n                    notification('success', 'login success');\n                    _context.next = 11;\n                    return put({\n                      type: actions.LOGIN_REQUEST_SUCCESS,\n                      token: token,\n                      profile: profile\n                    });\n\n                  case 11:\n                    _context.next = 16;\n                    break;\n\n                  case 13:\n                    notification('warning', 'Response type is invalid');\n                    _context.next = 16;\n                    return put(actions.loginRequestFailure(\"Invalid server response\"));\n\n                  case 16:\n                    _context.next = 23;\n                    break;\n\n                  case 18:\n                    _context.prev = 18;\n                    _context.t0 = _context[\"catch\"](1);\n                    notification('error', _context.t0.message);\n                    _context.next = 23;\n                    return put(actions.loginRequestFailure(_context.t0.message));\n\n                  case 23:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[1, 18]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction logoutRequest() {\n  return _regeneratorRuntime.wrap(function logoutRequest$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logout);\n\n        case 3:\n          _context3.next = 5;\n          return put(actions.logoutRequestSuccess());\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put(actions.logoutRequestFailure(_context3.t0));\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nexport function loginSuccess() {\n  return _regeneratorRuntime.wrap(function loginSuccess$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(actions.LOGIN_REQUEST_SUCCESS, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload) {\n            return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    setCookie('login_saga', payload.token);\n                    _context4.next = 3;\n                    return setCookie('token', payload.token);\n\n                  case 3:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function loginError() {\n  return _regeneratorRuntime.wrap(function loginError$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(actions.LOGOUT_REQUEST_FAILURE, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n            return _regeneratorRuntime.wrap(function _callee3$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    console.log(\"loginError\", payload);\n\n                  case 1:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function onLogout() {\n  return _regeneratorRuntime.wrap(function onLogout$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(actions.LOGOUT_REQUEST_START, logoutRequest);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked5);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([call(jwtLoginRequest), call(loginSuccess), call(onLogout)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/redux/authentication/sagas.js"],"names":["jwtLoginRequest","logoutRequest","loginSuccess","loginError","onLogout","rootSaga","all","takeLatest","put","call","fork","logout","removeCookie","setCookie","notification","JwtAuthentication","actions","jwtDecode","JWT_LOGIN_REQUEST_START","payload","userInfo","history","login","res","access","token","profile","type","LOGIN_REQUEST_SUCCESS","loginRequestFailure","message","logoutRequestSuccess","logoutRequestFailure","LOGOUT_REQUEST_FAILURE","console","log","LOGOUT_REQUEST_START"],"mappings":"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","sourcesContent":["import {all, takeLatest, put, call, fork} from 'redux-saga/effects';\nimport { logout, removeCookie, setCookie} from './auth.utils';\nimport {notification} from '@iso/components';\nimport JwtAuthentication from './jwtAuthentication';\nimport actions from './actions';\nimport jwtDecode from \"jwt-decode\";\n\n\nexport function* jwtLoginRequest() {\n    yield takeLatest(actions.JWT_LOGIN_REQUEST_START, function* ({payload: {userInfo, history}}) {\n        try {\n            const res = yield call(JwtAuthentication.login, userInfo);\n            let token, profile;\n            if (res.access) {\n                token = res.access;\n                profile = jwtDecode(res.access);\n                notification('success', 'login success');\n\n                yield put({\n                    type: actions.LOGIN_REQUEST_SUCCESS,\n                    token,\n                    profile,\n                });\n            } else {\n                notification('warning', 'Response type is invalid');\n                yield put(actions.loginRequestFailure(\"Invalid server response\"));\n            }\n        } catch (error) {\n            notification('error', error.message);\n            yield put(actions.loginRequestFailure(error.message));\n        }\n    });\n}\n\nfunction* logoutRequest() {\n    try {\n        yield call(logout);\n        yield put(actions.logoutRequestSuccess());\n    } catch (error) {\n        yield put(actions.logoutRequestFailure(error));\n    }\n}\n\nexport function* loginSuccess() {\n    yield takeLatest(actions.LOGIN_REQUEST_SUCCESS, function* (payload) {\n        setCookie('login_saga', payload.token);\n        yield setCookie('token', payload.token);\n    });\n}\n\nexport function* loginError() {\n    yield takeLatest(actions.LOGOUT_REQUEST_FAILURE, function* (payload) {\n        console.log(\"loginError\", payload)\n    });\n}\n\nexport function* onLogout() {\n    yield takeLatest(actions.LOGOUT_REQUEST_START, logoutRequest);\n}\n\nexport default function* rootSaga() {\n    yield all([call(jwtLoginRequest), call(loginSuccess), call(onLogout)]);\n}\n"]},"metadata":{},"sourceType":"module"}