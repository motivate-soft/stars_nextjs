{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\starsofboston\\\\next-django\\\\isomorphic-next\\\\components\\\\Admin\\\\Property\\\\Editor\\\\Editor.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\"; // import ReactQuill from \"react-quill\";\n\nimport \"react-quill/dist/quill.snow.css\";\nimport \"react-quill/dist/quill.bubble.css\";\nimport \"react-quill/dist/quill.core.css\";\nimport EditorWrapper from \"./Editor.styles\";\nvar ReactQuill = true ? require('react-quill') : function () {\n  return false;\n};\n\nfunction Editor(props) {\n  _s();\n\n  var _useState = useState(\"snow\"),\n      theme = _useState[0],\n      setTheme = _useState[1];\n\n  var html = props.html,\n      onEditorStateChange = props.onEditorStateChange,\n      placeholder = props.placeholder;\n\n  function handleChange(html) {\n    onEditorStateChange(html);\n  }\n\n  function handleThemeChange(newTheme) {\n    if (newTheme === \"core\") newTheme = null;\n    setTheme(newTheme);\n  }\n\n  return __jsx(EditorWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(ReactQuill, {\n    theme: theme,\n    onChange: handleChange,\n    value: html,\n    modules: Editor.modules,\n    formats: Editor.formats,\n    bounds: \".app\",\n    placeholder: placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }));\n}\n/*\r\n * Quill modules to attach to editor\r\n * See https://quilljs.com/docs/modules/ for complete options\r\n */\n\n\n_s(Editor, \"9Y/5KC1MnKKeiVZPuQFSlBHzuGY=\");\n\n_c = Editor;\nEditor.modules = {\n  toolbar: [// [{ header: '1' }, { header: '2' }, { font: [] }],\n  // [{ size: [] }],\n  [{\n    size: [\"small\", false, \"large\", \"huge\"]\n  }], // custom dropdown\n  [{\n    header: [1, 2, 3, 4, 5, 6, false]\n  }], [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"], [{\n    list: \"ordered\"\n  }, {\n    list: \"bullet\"\n  }, {\n    indent: \"-1\"\n  }, {\n    indent: \"+1\"\n  }], [\"link\", \"image\", \"video\"], [\"clean\"], [{\n    color: []\n  }, {\n    background: []\n  }], // dropdown with defaults from theme\n  [{\n    font: []\n  }], [{\n    align: []\n  }]],\n  clipboard: {\n    // toggle to add extra line breaks when pasting HTML:\n    matchVisual: false\n  }\n};\n/*\r\n * Quill editor formats\r\n * See https://quilljs.com/docs/formats/\r\n */\n\nEditor.formats = [\"header\", \"font\", \"size\", \"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\", \"list\", \"bullet\", \"indent\", \"link\", \"image\", \"video\"];\n/*\r\n * PropType validation\r\n */\n\nEditor.propTypes = {\n  placeholder: PropTypes.string\n};\nexport default Editor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/components/Admin/Property/Editor/Editor.js"],"names":["React","useState","PropTypes","EditorWrapper","ReactQuill","require","Editor","props","theme","setTheme","html","onEditorStateChange","placeholder","handleChange","handleThemeChange","newTheme","modules","formats","toolbar","size","header","list","indent","color","background","font","align","clipboard","matchVisual","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport \"react-quill/dist/quill.bubble.css\";\r\nimport \"react-quill/dist/quill.core.css\";\r\nimport EditorWrapper from \"./Editor.styles\";\r\nconst ReactQuill = typeof window === 'object' ? require('react-quill') : () => false;\r\n\r\nfunction Editor(props) {\r\n  const [theme, setTheme] = useState(\"snow\");\r\n  const { html, onEditorStateChange, placeholder } = props;\r\n\r\n  function handleChange(html) {\r\n    onEditorStateChange(html);\r\n  }\r\n\r\n  function handleThemeChange(newTheme) {\r\n    if (newTheme === \"core\") newTheme = null;\r\n    setTheme(newTheme);\r\n  }\r\n\r\n  return (\r\n    <EditorWrapper>\r\n      <ReactQuill\r\n        theme={theme}\r\n        onChange={handleChange}\r\n        value={html}\r\n        modules={Editor.modules}\r\n        formats={Editor.formats}\r\n        bounds={\".app\"}\r\n        placeholder={placeholder}\r\n      />\r\n      {/* <div className=\"themeSwitcher\">\r\n          <label>Theme </label>\r\n          <select onChange={(e) => this.handleThemeChange(e.target.value)}>\r\n            <option value=\"snow\">Snow</option>\r\n            <option value=\"bubble\">Bubble</option>\r\n            <option value=\"core\">Core</option>\r\n          </select>\r\n        </div> */}\r\n    </EditorWrapper>\r\n  );\r\n}\r\n\r\n/*\r\n * Quill modules to attach to editor\r\n * See https://quilljs.com/docs/modules/ for complete options\r\n */\r\nEditor.modules = {\r\n  toolbar: [\r\n    // [{ header: '1' }, { header: '2' }, { font: [] }],\r\n    // [{ size: [] }],\r\n    [{ size: [\"small\", false, \"large\", \"huge\"] }], // custom dropdown\r\n    [{ header: [1, 2, 3, 4, 5, 6, false] }],\r\n    [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"],\r\n    [\r\n      { list: \"ordered\" },\r\n      { list: \"bullet\" },\r\n      { indent: \"-1\" },\r\n      { indent: \"+1\" },\r\n    ],\r\n    [\"link\", \"image\", \"video\"],\r\n    [\"clean\"],\r\n    [{ color: [] }, { background: [] }], // dropdown with defaults from theme\r\n    [{ font: [] }],\r\n    [{ align: [] }],\r\n  ],\r\n  clipboard: {\r\n    // toggle to add extra line breaks when pasting HTML:\r\n    matchVisual: false,\r\n  },\r\n};\r\n/*\r\n * Quill editor formats\r\n * See https://quilljs.com/docs/formats/\r\n */\r\nEditor.formats = [\r\n  \"header\",\r\n  \"font\",\r\n  \"size\",\r\n  \"bold\",\r\n  \"italic\",\r\n  \"underline\",\r\n  \"strike\",\r\n  \"blockquote\",\r\n  \"list\",\r\n  \"bullet\",\r\n  \"indent\",\r\n  \"link\",\r\n  \"image\",\r\n  \"video\",\r\n];\r\n\r\n/*\r\n * PropType validation\r\n */\r\nEditor.propTypes = {\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nexport default Editor;\r\n"]},"metadata":{},"sourceType":"module"}