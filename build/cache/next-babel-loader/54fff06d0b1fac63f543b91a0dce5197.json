{"ast":null,"code":"import _DeleteOutlined from \"@ant-design/icons/lib/icons/DeleteOutlined\";\nimport _EditOutlined from \"@ant-design/icons/lib/icons/EditOutlined\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from \"react\";\nimport clone from \"clone\";\nimport Link from \"next/link\";\nimport Box from \"@iso/components/utility/box\";\nimport HelperText from \"@iso/components/utility/helper-text\";\nimport LayoutWrapper from \"@iso/components/utility/layoutWrapper\";\nimport PageHeader from \"@iso/components/utility/pageHeader\";\nimport IntlMessages from \"@iso/components/utility/intlMessages\";\nimport Scrollbars from \"@iso/components/utility/customScrollBar\";\nimport Button from \"@iso/components/uielements/button\";\nimport Popconfirm from \"@iso/components/Feedback/Popconfirm\";\nimport { DateCell, ImageCell, LinkCell, TextCell } from \"@iso/components/Tables/HelperCells\";\nimport Loader from '@iso/components/utility/loader';\nimport TableWrapper from \"@iso/containers/Tables/AntTables/AntTables.styles\";\nimport CardWrapper from \"./PropertyList.styles\";\nimport propertyActions from \"@redux/properties/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst renderCell = (object, type, key) => {\n  const value = object[key];\n\n  switch (type) {\n    case \"ImageCell\":\n      return ImageCell(value);\n\n    case \"DateCell\":\n      return DateCell(value);\n\n    case \"LinkCell\":\n      return LinkCell(value);\n\n    default:\n      return TextCell(value);\n  }\n};\n\nconst tableColumns = [{\n  title: \"Name\",\n  key: \"name\",\n  width: 100,\n  render: object => renderCell(object, \"TextCell\", \"name\")\n}, {\n  title: \"Address\",\n  key: \"address\",\n  width: 100,\n  render: object => renderCell(object, \"TextCell\", \"address\")\n}, {\n  title: \"BookervilleID\",\n  key: \"bookerville_id\",\n  width: 200,\n  render: object => renderCell(object, \"TextCell\", \"bookerville_id\")\n}, {\n  title: \"Updated At\",\n  key: \"updated_date\",\n  width: 200,\n  render: object => renderCell(object, \"DateCell\", \"updated_date\")\n}];\nexport default function PropertyList() {\n  const dispatch = useDispatch();\n  const {\n    items,\n    loading\n  } = useSelector(state => state.Properties);\n  const [state, setState] = React.useState({\n    columns: createcolumns(clone(tableColumns)),\n    dataList: items\n  });\n  useEffect(() => {\n    dispatch(propertyActions.getAllProperties());\n  }, []);\n  useEffect(() => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      dataList: items\n    }));\n  }, [items]);\n  const {\n    columns,\n    dataList\n  } = state;\n\n  function createcolumns(columns) {\n    const optColumn = {\n      title: \"operation\",\n      dataIndex: \"operation\",\n      width: 200,\n      render: (text, record, index) => __jsx(\"div\", {\n        className: \"opt-cell\"\n      }, __jsx(Link, {\n        href: `/admin/property?id=${record.id}`\n      }, __jsx(_EditOutlined, {\n        onClick: onEditCell\n      })), __jsx(Popconfirm, {\n        title: \"Sure to delete?\",\n        onConfirm: () => onDeleteCell(record.id)\n      }, __jsx(_DeleteOutlined, null)))\n    };\n    columns.push(optColumn);\n    return columns;\n  }\n\n  function onEditCell(index) {\n    console.log(\"oneditcell\", index);\n  }\n\n  function onDeleteCell(propertyId) {\n    dispatch(propertyActions.deleteProperty(propertyId)); // setState({ ...state, dataList });\n  }\n\n  return __jsx(LayoutWrapper, null, __jsx(PageHeader, null, \"Property\"), __jsx(Box, null, __jsx(CardWrapper, null, __jsx(\"div\", {\n    className: \"isoPropertyTableBtn\"\n  }, __jsx(Link, {\n    href: `property?id=1234`\n  }, __jsx(\"a\", null, __jsx(Button, {\n    type: \"primary\",\n    className: \"mateAddPropertyBtn\"\n  }, \"Add Property\")))), loading ? __jsx(Loader, null) : __jsx(\"div\", {\n    className: \"isoPropertyTable\"\n  }, __jsx(Scrollbars, {\n    style: {\n      width: \"100%\",\n      height: \"calc(60vh - 70px)\"\n    }\n  }, __jsx(TableWrapper, {\n    onRow: (record, rowIndex) => {\n      return {\n        onClick: event => {\n          console.log(\"rowClick\", record, rowIndex);\n        }\n      };\n    },\n    columns: columns,\n    dataSource: items,\n    pagination: {\n      pageSize: 5\n    },\n    className: \"propertyListTable\"\n  }))))));\n}","map":null,"metadata":{},"sourceType":"module"}