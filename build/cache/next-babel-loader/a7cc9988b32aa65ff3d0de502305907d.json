{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Router from 'next/router';\nimport { checkExpirity, getCookie, removeCookie } from \"@redux/authentication/auth.utils\";\nimport authActions from \"@redux/authentication/actions\";\nvar initState = {\n  idToken: null,\n  profile: null,\n  error: null\n};\n\nif (true) {\n  var token = getCookie('token');\n\n  if (token) {\n    try {\n      var res = checkExpirity(token);\n      console.log(\"__checkExpirity:browser___\", res);\n\n      if (res.expiredAt) {\n        initState = {\n          idToken: res.token,\n          profile: res.profile,\n          error: null\n        };\n      }\n\n      if (res.error) {\n        removeCookie('token');\n      }\n    } catch (e) {\n      removeCookie('token');\n    }\n  }\n}\n\nexport default function authReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case authActions.LOGIN_REQUEST_SUCCESS:\n      Router.replace('/admin');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        idToken: action.token,\n        profile: action.profile\n      });\n\n    case authActions.LOGOUT_REQUEST_FAILURE:\n    case authActions.LOGIN_REQUEST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        idToken: null,\n        error: action.payload\n      });\n\n    case authActions.LOGOUT_REQUEST_SUCCESS:\n      Router.replace('/admin/signin');\n      return initState;\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}