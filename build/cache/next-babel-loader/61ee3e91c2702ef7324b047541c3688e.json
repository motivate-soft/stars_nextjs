{"ast":null,"code":"import _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _Input from \"antd/lib/input\";\nimport _Button from \"antd/lib/button\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport postActions from \"@redux/posts/actions\";\nimport Container from \"@iso/ui/UI/Container/Container\";\nimport Editor from \"@components/Admin/Property/Editor/Editor\";\nimport Box from \"@iso/ui/Box/Box\";\nimport { SingeCategoryWrapper } from \"@components/Admin/Category/Category.styles\";\nimport Loader from \"@iso/components/utility/loader\";\nimport Link from \"next/link\";\nconst formItemLayout = {\n  labelCol: {\n    span: 24\n  },\n  wrapperCol: {\n    span: 24\n  }\n};\nconst {\n  useForm\n} = _Form;\n\nconst HtmlEditor = ({\n  value = {},\n  onChange\n}) => {\n  const triggerChange = changedValue => {\n    onChange(changedValue);\n  };\n\n  return __jsx(Editor, {\n    style: {\n      width: \"90%\",\n      height: \"70%\"\n    },\n    toolbarClassName: \"home-toolbar\",\n    wrapperClassName: \"home-wrapper\",\n    editorClassName: \"home-editor\",\n    html: value,\n    onEditorStateChange: html => triggerChange(html)\n  });\n};\n\nexport default function EditPost(props) {\n  const {\n    postId\n  } = props;\n  const {\n    selectedItem,\n    loading\n  } = useSelector(state => state.Posts);\n  const dispatch = useDispatch();\n  const [form] = useForm();\n  useEffect(() => {\n    dispatch(postActions.getPost(postId));\n  }, []);\n\n  function onReset() {\n    form.resetFields();\n  }\n\n  const onFinish = values => {\n    dispatch(postActions.updatePost(_objectSpread(_objectSpread({}, selectedItem), values)));\n  };\n\n  if (loading) return __jsx(Loader, null);\n  return __jsx(Box, null, __jsx(Container, null, __jsx(_Row, null, __jsx(_Col, {\n    lg: {\n      span: 12,\n      offset: 6\n    },\n    sm: 24\n  }, __jsx(SingeCategoryWrapper, null, __jsx(\"div\", {\n    className: \"card-title-wrapper\"\n  }, __jsx(\"h3\", null, \"Edit Post\"), __jsx(Link, {\n    href: \"/admin/post\"\n  }, __jsx(_Button, {\n    type: \"primary\"\n  }, \"Back to List\"))), selectedItem && selectedItem.id === parseInt(postId) && selectedItem ? __jsx(Box, null, __jsx(Container, null, __jsx(_Form, _extends({\n    name: \"mainInfo\"\n  }, formItemLayout, {\n    onFinish: onFinish,\n    initialValues: {\n      title: selectedItem.title,\n      text: selectedItem.text\n    }\n  }), __jsx(_Form.Item, {\n    label: \"Title\",\n    name: \"title\",\n    rules: [{\n      required: true,\n      message: \"This field is required\"\n    }]\n  }, __jsx(_Input, null)), __jsx(_Form.Item, {\n    label: \"Text\",\n    name: \"text\",\n    rules: [{\n      required: true,\n      message: \"This field is required\"\n    }]\n  }, __jsx(HtmlEditor, null)), __jsx(\"div\", null, __jsx(_Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"Save\"), __jsx(_Button, {\n    type: \"default\",\n    onClick: onReset\n  }, \"Reset\"))))) : null)))));\n}","map":null,"metadata":{},"sourceType":"module"}