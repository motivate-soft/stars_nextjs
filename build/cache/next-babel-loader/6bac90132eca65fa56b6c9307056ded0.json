{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Link from 'next/link';\nimport Menu from '@iso/components/uielements/menu';\nimport siteConfig from '@iso/config/site.config';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nconst SubMenu = Menu.SubMenu;\nexport default function SidebarMenu(_ref) {\n  let {\n    item,\n    submenuStyle,\n    submenuColor\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"item\", \"submenuStyle\", \"submenuColor\"]);\n\n  const {\n    key,\n    label,\n    leftIcon,\n    children\n  } = item;\n  const url = siteConfig.dashboard;\n\n  if (children) {\n    return __jsx(SubMenu, _extends({\n      key: key,\n      title: __jsx(\"span\", {\n        className: \"isoMenuHolder\",\n        style: submenuColor\n      }, leftIcon, __jsx(\"span\", {\n        className: \"nav-text\"\n      }, __jsx(IntlMessages, {\n        id: label\n      })))\n    }, rest), children.map(({\n      key,\n      label,\n      withoutDashboard\n    }) => {\n      const linkTo = withoutDashboard ? `/${key}` : `${url}/${key}`;\n      return __jsx(Menu.Item, {\n        style: submenuStyle,\n        key: key\n      }, __jsx(Link, {\n        href: linkTo\n      }, __jsx(\"a\", {\n        className: \"isoMenuHolder\",\n        style: submenuColor\n      }, __jsx(IntlMessages, {\n        id: label\n      }))));\n    }));\n  }\n\n  return __jsx(Menu.Item, _extends({\n    key: key\n  }, rest), __jsx(Link, {\n    href: `${url}/${key}`\n  }, __jsx(\"a\", {\n    className: \"isoMenuHolder\",\n    style: submenuColor\n  }, leftIcon, __jsx(\"span\", {\n    className: \"nav-text\"\n  }, __jsx(IntlMessages, {\n    id: label\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}