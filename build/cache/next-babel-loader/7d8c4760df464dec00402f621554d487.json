{"ast":null,"code":"import { all, takeEvery, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport actions from \"./actions\";\nimport { notification } from \"@iso/components\";\nimport categoryApi from \"../../service/categoryApi\";\nexport function* getAllCategories() {\n  yield takeLatest(actions.GET_ALL_CATEGORIES_REQUEST, function* () {\n    try {\n      const res = yield call(categoryApi.getAll);\n      yield put({\n        type: actions.GET_ALL_CATEGORIES_SUCCESS,\n        items: res\n      });\n    } catch (error) {\n      yield put({\n        type: actions.GET_ALL_CATEGORIES_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* getCategory() {\n  yield takeEvery(actions.GET_CATEGORY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(categoryApi.getOne, payload.categoryId);\n      yield put({\n        type: actions.GET_CATEGORY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      yield put({\n        type: actions.GET_CATEGORY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* addCategory() {\n  yield takeEvery(actions.ADD_CATEGORY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(categoryApi.add, payload.category);\n      notification(\"success\", \"New category has been created\");\n      yield put({\n        type: actions.ADD_CATEGORY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification(\"warning\", error);\n      yield put({\n        type: actions.ADD_CATEGORY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* updateCategory() {\n  yield takeEvery(actions.UPDATE_CATEGORY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(categoryApi.update, payload.category);\n      notification(\"success\", \"Category has been updated\");\n      yield put({\n        type: actions.UPDATE_CATEGORY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification(\"warning\", error);\n      yield put({\n        type: actions.UPDATE_CATEGORY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* deleteCategory() {\n  yield takeEvery(actions.DELETE_CATEGORY_REQUEST, function* (payload) {\n    try {\n      yield call(categoryApi.delete, payload.categoryId);\n      notification(\"success\", \"Category has been deleted\");\n      yield put({\n        type: actions.DELETE_CATEGORY_SUCCESS,\n        categoryId: payload.categoryId\n      });\n    } catch (error) {\n      notification(\"warning\", error);\n      yield put({\n        type: actions.DELETE_CATEGORY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport default function* rootSaga() {\n  yield all([call(getAllCategories), fork(getCategory), fork(addCategory), fork(updateCategory), fork(deleteCategory)]);\n}","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/redux/categories/saga.js"],"names":["all","takeEvery","fork","takeLatest","call","put","actions","notification","categoryApi","getAllCategories","GET_ALL_CATEGORIES_REQUEST","res","getAll","type","GET_ALL_CATEGORIES_SUCCESS","items","error","GET_ALL_CATEGORIES_FAILURE","message","getCategory","GET_CATEGORY_REQUEST","payload","getOne","categoryId","GET_CATEGORY_SUCCESS","item","GET_CATEGORY_FAILURE","addCategory","ADD_CATEGORY_REQUEST","add","category","ADD_CATEGORY_SUCCESS","ADD_CATEGORY_FAILURE","updateCategory","UPDATE_CATEGORY_REQUEST","update","UPDATE_CATEGORY_SUCCESS","UPDATE_CATEGORY_FAILURE","deleteCategory","DELETE_CATEGORY_REQUEST","delete","DELETE_CATEGORY_SUCCESS","DELETE_CATEGORY_FAILURE","rootSaga"],"mappings":"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","sourcesContent":["import {\r\n    all,\r\n    takeEvery,\r\n    fork,\r\n    takeLatest,\r\n    call,\r\n    put,\r\n} from \"redux-saga/effects\";\r\nimport actions from \"./actions\";\r\nimport {notification} from \"@iso/components\";\r\nimport categoryApi from \"../../service/categoryApi\";\r\n\r\n\r\nexport function* getAllCategories() {\r\n    yield takeLatest(actions.GET_ALL_CATEGORIES_REQUEST, function* () {\r\n        try {\r\n            const res = yield call(categoryApi.getAll);\r\n            yield put({\r\n                type: actions.GET_ALL_CATEGORIES_SUCCESS,\r\n                items: res,\r\n            });\r\n        } catch (error) {\r\n            yield put({\r\n                type: actions.GET_ALL_CATEGORIES_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* getCategory() {\r\n    yield takeEvery(actions.GET_CATEGORY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(categoryApi.getOne, payload.categoryId);\r\n            yield put({\r\n                type: actions.GET_CATEGORY_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            yield put({\r\n                type: actions.GET_CATEGORY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* addCategory() {\r\n    yield takeEvery(actions.ADD_CATEGORY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(categoryApi.add, payload.category);\r\n            notification(\"success\", \"New category has been created\");\r\n\r\n            yield put({\r\n                type: actions.ADD_CATEGORY_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification(\"warning\", error);\r\n\r\n            yield put({\r\n                type: actions.ADD_CATEGORY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* updateCategory() {\r\n    yield takeEvery(actions.UPDATE_CATEGORY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(categoryApi.update, payload.category);\r\n            notification(\"success\", \"Category has been updated\");\r\n\r\n            yield put({\r\n                type: actions.UPDATE_CATEGORY_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification(\"warning\", error);\r\n\r\n            yield put({\r\n                type: actions.UPDATE_CATEGORY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* deleteCategory() {\r\n    yield takeEvery(actions.DELETE_CATEGORY_REQUEST, function* (payload) {\r\n        try {\r\n            yield call(categoryApi.delete, payload.categoryId);\r\n            notification(\"success\", \"Category has been deleted\");\r\n            yield put({\r\n                type: actions.DELETE_CATEGORY_SUCCESS,\r\n                categoryId: payload.categoryId,\r\n            });\r\n        } catch (error) {\r\n            notification(\"warning\", error);\r\n            yield put({\r\n                type: actions.DELETE_CATEGORY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        call(getAllCategories),\r\n        fork(getCategory),\r\n        fork(addCategory),\r\n        fork(updateCategory),\r\n        fork(deleteCategory),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}