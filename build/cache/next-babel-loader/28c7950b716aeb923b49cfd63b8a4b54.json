{"ast":null,"code":"import { all, takeEvery, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport actions from \"./actions\";\nimport amenityApi from \"../../service/amenityApi\";\nimport { notification } from \"@iso/components\";\nimport { Router } from \"next/router\";\nexport function* getAllAmenities() {\n  yield takeLatest(actions.GET_ALL_AMENITIES_REQUEST, function* () {\n    try {\n      const res = yield call(amenityApi.getAll);\n      yield put({\n        type: actions.GET_ALL_AMENITIES_SUCCESS,\n        items: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.GET_ALL_AMENITIES_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* getAmenity() {\n  yield takeEvery(actions.GET_AMENITY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(amenityApi.getOne, payload.amenityId);\n      yield put({\n        type: actions.GET_AMENITY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.GET_AMENITY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* addAmenity() {\n  yield takeEvery(actions.ADD_AMENITY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(amenityApi.add, payload.amenity);\n      notification('success', 'New amenity has been created successfully');\n      yield put({\n        type: actions.ADD_AMENITY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.ADD_AMENITY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* updateAmenity() {\n  yield takeEvery(actions.UPDATE_AMENITY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(amenityApi.update, payload.amenity);\n      notification('success', 'Amenity has been updated successfully');\n      yield put({\n        type: actions.UPDATE_AMENITY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.UPDATE_AMENITY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* deleteAmenity() {\n  yield takeEvery(actions.DELETE_AMENITY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(amenityApi.delete, payload.amenityId);\n      notification('success', 'Amenity has been deleted successfully');\n      Router.push('/admin/amenity');\n      yield put({\n        type: actions.DELETE_AMENITY_SUCCESS,\n        amenityId: payload.amenityId\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.DELETE_AMENITY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport default function* rootSaga() {\n  yield all([call(getAllAmenities), fork(getAmenity), fork(addAmenity), fork(updateAmenity), fork(deleteAmenity)]);\n}","map":null,"metadata":{},"sourceType":"module"}