{"ast":null,"code":"import { all, takeEvery, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport actions from \"./actions\";\nimport amenityApi from \"../../service/amenityApi\";\nimport { notification } from \"@iso/components\";\nimport { Router } from \"next/router\";\nexport function* getAllAmenities() {\n  yield takeLatest(actions.GET_ALL_AMENITIES_REQUEST, function* () {\n    try {\n      const res = yield call(amenityApi.getAll);\n      yield put({\n        type: actions.GET_ALL_AMENITIES_SUCCESS,\n        items: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.GET_ALL_AMENITIES_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* getAmenity() {\n  yield takeEvery(actions.GET_AMENITY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(amenityApi.getOne, payload.amenityId);\n      yield put({\n        type: actions.GET_AMENITY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.GET_AMENITY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* addAmenity() {\n  yield takeEvery(actions.ADD_AMENITY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(amenityApi.add, payload.amenity);\n      notification('success', 'New amenity has been created successfully');\n      yield put({\n        type: actions.ADD_AMENITY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.ADD_AMENITY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* updateAmenity() {\n  yield takeEvery(actions.UPDATE_AMENITY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(amenityApi.update, payload.amenity);\n      notification('success', 'Amenity has been updated successfully');\n      yield put({\n        type: actions.UPDATE_AMENITY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.UPDATE_AMENITY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* deleteAmenity() {\n  yield takeEvery(actions.DELETE_AMENITY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(amenityApi.delete, payload.amenityId);\n      notification('success', 'Amenity has been deleted successfully');\n      Router.push('/admin/amenity');\n      yield put({\n        type: actions.DELETE_AMENITY_SUCCESS,\n        amenityId: payload.amenityId\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.DELETE_AMENITY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport default function* rootSaga() {\n  yield all([call(getAllAmenities), fork(getAmenity), fork(addAmenity), fork(updateAmenity), fork(deleteAmenity)]);\n}","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/redux/amenities/saga.js"],"names":["all","takeEvery","fork","takeLatest","call","put","actions","amenityApi","notification","Router","getAllAmenities","GET_ALL_AMENITIES_REQUEST","res","getAll","type","GET_ALL_AMENITIES_SUCCESS","items","error","message","GET_ALL_AMENITIES_FAILURE","getAmenity","GET_AMENITY_REQUEST","payload","getOne","amenityId","GET_AMENITY_SUCCESS","item","GET_AMENITY_FAILURE","addAmenity","ADD_AMENITY_REQUEST","add","amenity","ADD_AMENITY_SUCCESS","ADD_AMENITY_FAILURE","updateAmenity","UPDATE_AMENITY_REQUEST","update","UPDATE_AMENITY_SUCCESS","UPDATE_AMENITY_FAILURE","deleteAmenity","DELETE_AMENITY_REQUEST","delete","push","DELETE_AMENITY_SUCCESS","DELETE_AMENITY_FAILURE","rootSaga"],"mappings":"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","sourcesContent":["import {\r\n    all,\r\n    takeEvery,\r\n    fork,\r\n    takeLatest,\r\n    call,\r\n    put,\r\n} from \"redux-saga/effects\";\r\nimport actions from \"./actions\";\r\nimport amenityApi from \"../../service/amenityApi\";\r\nimport {notification} from \"@iso/components\";\r\nimport {Router} from \"next/router\";\r\n\r\n\r\nexport function* getAllAmenities() {\r\n    yield takeLatest(actions.GET_ALL_AMENITIES_REQUEST, function* () {\r\n        try {\r\n            const res = yield call(amenityApi.getAll);\r\n            yield put({\r\n                type: actions.GET_ALL_AMENITIES_SUCCESS,\r\n                items: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.GET_ALL_AMENITIES_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* getAmenity() {\r\n    yield takeEvery(actions.GET_AMENITY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(amenityApi.getOne, payload.amenityId);\r\n            yield put({\r\n                type: actions.GET_AMENITY_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.GET_AMENITY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* addAmenity() {\r\n    yield takeEvery(actions.ADD_AMENITY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(amenityApi.add, payload.amenity);\r\n            notification('success', 'New amenity has been created successfully');\r\n\r\n            yield put({\r\n                type: actions.ADD_AMENITY_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.ADD_AMENITY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* updateAmenity() {\r\n    yield takeEvery(actions.UPDATE_AMENITY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(amenityApi.update, payload.amenity);\r\n            notification('success', 'Amenity has been updated successfully');\r\n            yield put({\r\n                type: actions.UPDATE_AMENITY_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.UPDATE_AMENITY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* deleteAmenity() {\r\n    yield takeEvery(actions.DELETE_AMENITY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(amenityApi.delete, payload.amenityId);\r\n            notification('success', 'Amenity has been deleted successfully');\r\n            Router.push('/admin/amenity')\r\n            yield put({\r\n                type: actions.DELETE_AMENITY_SUCCESS,\r\n                amenityId: payload.amenityId,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.DELETE_AMENITY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        call(getAllAmenities),\r\n        fork(getAmenity),\r\n        fork(addAmenity),\r\n        fork(updateAmenity),\r\n        fork(deleteAmenity),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}