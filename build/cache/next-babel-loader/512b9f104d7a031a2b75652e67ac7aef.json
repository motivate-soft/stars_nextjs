{"ast":null,"code":"import { all, takeEvery, fork, takeLatest, call, put } from 'redux-saga/effects';\nimport actions from './actions';\nimport { notification } from \"@iso/components\";\nimport userApi from \"../../service/userApi\";\nimport { Router } from \"next/router\";\nexport function* getAllUsers() {\n  yield takeLatest(actions.GET_ALL_USERS_REQUEST, function* () {\n    try {\n      const res = yield call(userApi.getAll);\n      yield put({\n        type: actions.GET_ALL_USERS_SUCCESS,\n        items: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.GET_ALL_USERS_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* getUser() {\n  yield takeEvery(actions.GET_USER_REQUEST, function* (payload) {\n    try {\n      const res = yield call(userApi.getOne, payload.userId);\n      yield put({\n        type: actions.GET_USER_SUCCESS,\n        item: res\n      });\n    } catch (e) {\n      yield put({\n        type: actions.GET_USER_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* addUser() {\n  yield takeEvery(actions.ADD_USER_REQUEST, function* (payload) {\n    try {\n      const res = yield call(userApi.add, payload.user);\n      notification('success', 'New user created successfully!');\n      yield put({\n        type: actions.ADD_USER_REQUEST,\n        item: res\n      });\n    } catch (e) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.ADD_USER_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* updateUser() {\n  yield takeEvery(actions.UPDATE_USER_REQUEST, function* (payload) {\n    try {\n      const res = yield call(userApi.update, payload.user);\n      notification('success', 'User has been updated successfully!');\n      yield put({\n        type: actions.UPDATE_USER_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.UPDATE_USER_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* deleteUser() {\n  yield takeEvery(actions.DELETE_USER_REQUEST, function* (payload) {\n    try {\n      const res = yield call(userApi.delete, payload.userId);\n      notification('success', 'User has been deleted successfully!');\n      Router.push('/admin/user');\n      yield put({\n        type: actions.DELETE_USER_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.UPDATE_USER_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport default function* rootSaga() {\n  yield all([call(getAllUsers), fork(getUser), fork(addUser), fork(updateUser), fork(deleteUser)]);\n}","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/redux/users/saga.js"],"names":["all","takeEvery","fork","takeLatest","call","put","actions","notification","userApi","Router","getAllUsers","GET_ALL_USERS_REQUEST","res","getAll","type","GET_ALL_USERS_SUCCESS","items","error","message","GET_ALL_USERS_FAILURE","getUser","GET_USER_REQUEST","payload","getOne","userId","GET_USER_SUCCESS","item","e","GET_USER_FAILURE","addUser","ADD_USER_REQUEST","add","user","ADD_USER_FAILURE","updateUser","UPDATE_USER_REQUEST","update","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","deleteUser","DELETE_USER_REQUEST","delete","push","DELETE_USER_SUCCESS","rootSaga"],"mappings":"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","sourcesContent":["import {all, takeEvery, fork, takeLatest, call, put} from 'redux-saga/effects';\r\nimport actions from './actions';\r\nimport {notification} from \"@iso/components\";\r\nimport userApi from \"../../service/userApi\";\r\nimport {Router} from \"next/router\";\r\n\r\nexport function* getAllUsers() {\r\n    yield takeLatest(actions.GET_ALL_USERS_REQUEST, function* () {\r\n        try {\r\n            const res = yield call(userApi.getAll);\r\n            yield put({\r\n                type: actions.GET_ALL_USERS_SUCCESS,\r\n                items: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message)\r\n            yield put({\r\n                type: actions.GET_ALL_USERS_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* getUser() {\r\n    yield takeEvery(actions.GET_USER_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(userApi.getOne, payload.userId);\r\n            yield put({\r\n                type: actions.GET_USER_SUCCESS,\r\n                item: res\r\n            })\r\n        } catch (e) {\r\n            yield put({\r\n                type: actions.GET_USER_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* addUser() {\r\n    yield takeEvery(actions.ADD_USER_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(userApi.add, payload.user);\r\n            notification('success', 'New user created successfully!')\r\n            yield put({\r\n                type: actions.ADD_USER_REQUEST,\r\n                item: res\r\n            })\r\n        } catch (e) {\r\n            notification('warning', error.message)\r\n            yield put({\r\n                type: actions.ADD_USER_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* updateUser() {\r\n    yield takeEvery(actions.UPDATE_USER_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(userApi.update, payload.user);\r\n            notification('success', 'User has been updated successfully!')\r\n            yield put({\r\n                type: actions.UPDATE_USER_SUCCESS,\r\n                item: res\r\n            })\r\n        } catch (error) {\r\n            notification('warning', error.message)\r\n            yield put({\r\n                type: actions.UPDATE_USER_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* deleteUser() {\r\n    yield takeEvery(actions.DELETE_USER_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(userApi.delete, payload.userId);\r\n            notification('success', 'User has been deleted successfully!')\r\n            Router.push('/admin/user')\r\n            yield put({\r\n                type: actions.DELETE_USER_SUCCESS,\r\n                item: res\r\n            })\r\n        } catch (error) {\r\n            notification('warning', error.message)\r\n            yield put({\r\n                type: actions.UPDATE_USER_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([call(getAllUsers), fork(getUser), fork(addUser), fork(updateUser), fork(deleteUser)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}