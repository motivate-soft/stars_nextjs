{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { BACKEND_URL } from \"../env-config\";\nimport { getCookie } from \"@redux/authentication/auth.utils\";\nconst categoryApi = {\n  getAll: async () => await fetch(`${BACKEND_URL}/api/accommodation/category/`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getCookie(\"token\")}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    throw res;\n  }).catch(handleError),\n  getOne: async id => await fetch(`${BACKEND_URL}/api/accommodation/category/${id}/`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getCookie(\"token\")}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    throw res;\n  }).catch(handleError),\n  add: async (category) => await fetch(`${BACKEND_URL}/api/accommodation/category/`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getCookie(\"token\")}`\n    },\n    body: JSON.stringify(category)\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    throw res;\n  }).catch(handleError),\n  update: async (category) => await fetch(`${BACKEND_URL}/api/accommodation/category/${category.id}/`, {\n    method: \"PATCH\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getCookie(\"token\")}`\n    },\n    body: JSON.stringify(category)\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    throw res;\n  }).catch(handleError),\n  delete: async (categoryId) => await fetch(`${BACKEND_URL}/api/accommodation/category/${categoryId}/`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getCookie(\"token\")}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      return null;\n    }\n\n    throw res;\n  }).catch(handleError)\n};\n\nconst handleError = res => {\n  console.log(\"___handleError___\", res);\n\n  if (res instanceof Error) {\n    throw Error('Network error');\n  }\n\n  let error = new Error(); // res.json().then((responseJson) => {\n  //     error = {\n  //         status: res.status,\n  //         statusText: res.statusText,\n  //         message: responseJson.detail || 'Application Error'\n  //     }\n  //     throw error\n  // })\n\n  if (res.status >= 400 && res.status < 500) {\n    console.log(res.text());\n    error = {\n      status: res.status,\n      statusText: res.statusText,\n      message: res.detail || 'Application Error'\n    };\n    throw error;\n  }\n\n  if (res.status >= 500) {\n    error = {\n      status: res.status,\n      statusText: res.statusText,\n      message: res.detail || 'Server Error'\n    };\n    throw error;\n  }\n\n  error = _objectSpread(_objectSpread({}, error), {}, {\n    status: res.status,\n    statusText: res.statusText,\n    message: res.detail || 'Error'\n  });\n  throw error;\n};\n\nexport default categoryApi;","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/service/categoryApi.js"],"names":["BACKEND_URL","getCookie","categoryApi","getAll","fetch","method","headers","Accept","Authorization","then","res","ok","json","catch","handleError","getOne","id","add","category","body","JSON","stringify","update","delete","categoryId","console","log","Error","error","status","text","statusText","message","detail"],"mappings":"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","sourcesContent":["import {BACKEND_URL} from \"../env-config\";\r\nimport {getCookie} from \"@redux/authentication/auth.utils\";\r\n\r\nconst categoryApi = {\r\n    getAll: async () =>\r\n        await fetch(`${BACKEND_URL}/api/accommodation/category/`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${getCookie(\"token\")}`,\r\n            },\r\n        })\r\n            .then(res => {\r\n                if (res.ok) {\r\n                    return res.json()\r\n                }\r\n                throw res;\r\n            })\r\n            .catch(handleError),\r\n\r\n    getOne: async (id) => await fetch(`${BACKEND_URL}/api/accommodation/category/${id}/`, {\r\n        method: \"GET\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${getCookie(\"token\")}`,\r\n        },\r\n    })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                return res.json()\r\n            }\r\n            throw res;\r\n        })\r\n        .catch(handleError),\r\n\r\n    add: async (category) =>\r\n        await fetch(`${BACKEND_URL}/api/accommodation/category/`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${getCookie(\"token\")}`,\r\n            },\r\n            body: JSON.stringify(category),\r\n        })\r\n            .then(res => {\r\n                if (res.ok) {\r\n                    return res.json()\r\n                }\r\n                throw res;\r\n            })\r\n            .catch(handleError),\r\n\r\n    update: async (category) =>\r\n        await fetch(`${BACKEND_URL}/api/accommodation/category/${category.id}/`, {\r\n            method: \"PATCH\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${getCookie(\"token\")}`,\r\n            },\r\n            body: JSON.stringify(category),\r\n        })\r\n            .then(res => {\r\n                if (res.ok) {\r\n                    return res.json()\r\n                }\r\n                throw res;\r\n            })\r\n            .catch(handleError),\r\n\r\n    delete: async (categoryId) =>\r\n        await fetch(`${BACKEND_URL}/api/accommodation/category/${categoryId}/`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${getCookie(\"token\")}`,\r\n            },\r\n        })\r\n            .then(res => {\r\n                if (res.ok) {\r\n                    return null\r\n                }\r\n                throw res;\r\n            })\r\n            .catch(handleError),\r\n};\r\n\r\nconst handleError = (res) => {\r\n    console.log(\"___handleError___\", res)\r\n    if (res instanceof Error) {\r\n        throw Error('Network error');\r\n    }\r\n\r\n    let error = new Error();\r\n    // res.json().then((responseJson) => {\r\n    //     error = {\r\n    //         status: res.status,\r\n    //         statusText: res.statusText,\r\n    //         message: responseJson.detail || 'Application Error'\r\n    //     }\r\n    //     throw error\r\n    // })\r\n    if (res.status >= 400 && res.status < 500) {\r\n        console.log(res.text())\r\n        error = {\r\n            status: res.status,\r\n            statusText: res.statusText,\r\n            message: res.detail || 'Application Error'\r\n        }\r\n        throw error\r\n    }\r\n\r\n    if (res.status >= 500) {\r\n        error = {\r\n            status: res.status,\r\n            statusText: res.statusText,\r\n            message: res.detail || 'Server Error'\r\n        }\r\n        throw error\r\n    }\r\n\r\n    error = {\r\n        ...error,\r\n        status: res.status,\r\n        statusText: res.statusText,\r\n        message: res.detail || 'Error'\r\n    }\r\n    throw error\r\n}\r\n\r\nexport default categoryApi"]},"metadata":{},"sourceType":"module"}