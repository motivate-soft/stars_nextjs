{"ast":null,"code":"import { all, takeEvery, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport actions from \"./actions\";\nimport { notification } from \"@iso/components\";\nimport postApi from \"../../service/postApi\";\nexport function* getAllPosts() {\n  yield takeLatest(actions.GET_ALL_POSTS_REQUEST, function* () {\n    try {\n      const res = yield call(postApi.getAll);\n      yield put({\n        type: actions.GET_ALL_POSTS_SUCCESS,\n        items: res\n      });\n    } catch (error) {\n      yield put({\n        type: actions.GET_ALL_POSTS_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* getPost() {\n  yield takeEvery(actions.GET_POST_REQUEST, function* (payload) {\n    try {\n      const res = yield call(postApi.getOne, payload.postId);\n      yield put({\n        type: actions.GET_POST_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      yield put({\n        type: actions.GET_POST_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* addPost() {\n  yield takeEvery(actions.ADD_POST_REQUEST, function* (payload) {\n    try {\n      const res = yield call(postApi.add, payload.post);\n      notification('warning', 'New post created');\n      yield put({\n        type: actions.ADD_POST_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.ADD_POST_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* updatePost() {\n  yield takeEvery(actions.UPDATE_POST_REQUEST, function* (payload) {\n    try {\n      const res = yield call(postApi.update, payload.post);\n      notification('warning', 'Post has been updated successfully');\n      yield put({\n        type: actions.UPDATE_POST_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.UPDATE_POST_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* deletePost() {\n  yield takeEvery(actions.DELETE_POST_REQUEST, function* (payload) {\n    try {\n      yield call(postApi.delete, payload.postId);\n      notification('warning', 'Post has been deleted successfully');\n      yield put({\n        type: actions.DELETE_POST_SUCCESS,\n        postId: payload.postId\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.DELETE_POST_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport default function* rootSaga() {\n  yield all([call(getAllPosts), fork(getPost), fork(addPost), fork(updatePost), fork(deletePost)]);\n}","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/redux/posts/saga.js"],"names":["all","takeEvery","fork","takeLatest","call","put","actions","notification","postApi","getAllPosts","GET_ALL_POSTS_REQUEST","res","getAll","type","GET_ALL_POSTS_SUCCESS","items","error","GET_ALL_POSTS_FAILURE","message","getPost","GET_POST_REQUEST","payload","getOne","postId","GET_POST_SUCCESS","item","GET_POST_FAILURE","addPost","ADD_POST_REQUEST","add","post","ADD_POST_SUCCESS","ADD_POST_FAILURE","updatePost","UPDATE_POST_REQUEST","update","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","deletePost","DELETE_POST_REQUEST","delete","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","rootSaga"],"mappings":"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","sourcesContent":["import {\r\n    all,\r\n    takeEvery,\r\n    fork,\r\n    takeLatest,\r\n    call,\r\n    put,\r\n} from \"redux-saga/effects\";\r\nimport actions from \"./actions\";\r\nimport {notification} from \"@iso/components\";\r\nimport postApi from \"../../service/postApi\";\r\n\r\n\r\nexport function* getAllPosts() {\r\n    yield takeLatest(actions.GET_ALL_POSTS_REQUEST, function* () {\r\n        try {\r\n            const res = yield call(postApi.getAll);\r\n\r\n            yield put({\r\n                type: actions.GET_ALL_POSTS_SUCCESS,\r\n                items: res,\r\n            });\r\n        } catch (error) {\r\n\r\n            yield put({\r\n                type: actions.GET_ALL_POSTS_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* getPost() {\r\n    yield takeEvery(actions.GET_POST_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(postApi.getOne, payload.postId);\r\n            yield put({\r\n                type: actions.GET_POST_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            yield put({\r\n                type: actions.GET_POST_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* addPost() {\r\n    yield takeEvery(actions.ADD_POST_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(postApi.add, payload.post);\r\n            notification('warning', 'New post created');\r\n\r\n            yield put({\r\n                type: actions.ADD_POST_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.ADD_POST_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* updatePost() {\r\n    yield takeEvery(actions.UPDATE_POST_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(postApi.update, payload.post);\r\n            notification('warning', 'Post has been updated successfully');\r\n            yield put({\r\n                type: actions.UPDATE_POST_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.UPDATE_POST_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* deletePost() {\r\n    yield takeEvery(actions.DELETE_POST_REQUEST, function* (payload) {\r\n        try {\r\n            yield call(postApi.delete, payload.postId);\r\n            notification('warning', 'Post has been deleted successfully');\r\n\r\n            yield put({\r\n                type: actions.DELETE_POST_SUCCESS,\r\n                postId: payload.postId,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.DELETE_POST_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        call(getAllPosts),\r\n        fork(getPost),\r\n        fork(addPost),\r\n        fork(updatePost),\r\n        fork(deletePost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}