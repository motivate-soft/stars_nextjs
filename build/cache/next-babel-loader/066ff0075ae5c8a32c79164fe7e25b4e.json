{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getAllAmenities),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getAmenity),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addAmenity),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(updateAmenity),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(deleteAmenity),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport actions from \"./actions\";\nimport amenityApi from \"../../service/amenityApi\";\nimport { notification } from \"@iso/components\";\nimport { Router } from \"next/router\";\nexport function getAllAmenities() {\n  return _regeneratorRuntime.wrap(function getAllAmenities$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.GET_ALL_AMENITIES_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(amenityApi.getAll);\n\n                  case 3:\n                    res = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: actions.GET_ALL_AMENITIES_SUCCESS,\n                      items: res\n                    });\n\n                  case 6:\n                    _context.next = 13;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    notification('warning', _context.t0.message);\n                    _context.next = 13;\n                    return put({\n                      type: actions.GET_ALL_AMENITIES_FAILURE,\n                      error: _context.t0.message\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\nexport function getAmenity() {\n  return _regeneratorRuntime.wrap(function getAmenity$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(actions.GET_AMENITY_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return call(amenityApi.getOne, payload.amenityId);\n\n                  case 3:\n                    res = _context3.sent;\n                    _context3.next = 6;\n                    return put({\n                      type: actions.GET_AMENITY_SUCCESS,\n                      item: res\n                    });\n\n                  case 6:\n                    _context3.next = 13;\n                    break;\n\n                  case 8:\n                    _context3.prev = 8;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    notification('warning', _context3.t0.message);\n                    _context3.next = 13;\n                    return put({\n                      type: actions.GET_AMENITY_FAILURE,\n                      error: _context3.t0.message\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee2, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function addAmenity() {\n  return _regeneratorRuntime.wrap(function addAmenity$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(actions.ADD_AMENITY_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.prev = 0;\n                    _context5.next = 3;\n                    return call(amenityApi.add, payload.amenity);\n\n                  case 3:\n                    res = _context5.sent;\n                    notification('success', 'New amenity has been created successfully');\n                    _context5.next = 7;\n                    return put({\n                      type: actions.ADD_AMENITY_SUCCESS,\n                      item: res\n                    });\n\n                  case 7:\n                    _context5.next = 14;\n                    break;\n\n                  case 9:\n                    _context5.prev = 9;\n                    _context5.t0 = _context5[\"catch\"](0);\n                    notification('warning', _context5.t0.message);\n                    _context5.next = 14;\n                    return put({\n                      type: actions.ADD_AMENITY_FAILURE,\n                      error: _context5.t0.message\n                    });\n\n                  case 14:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee3, null, [[0, 9]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function updateAmenity() {\n  return _regeneratorRuntime.wrap(function updateAmenity$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(actions.UPDATE_AMENITY_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee4$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.prev = 0;\n                    _context7.next = 3;\n                    return call(amenityApi.update, payload.amenity);\n\n                  case 3:\n                    res = _context7.sent;\n                    notification('success', 'Amenity has been updated successfully');\n                    _context7.next = 7;\n                    return put({\n                      type: actions.UPDATE_AMENITY_SUCCESS,\n                      item: res\n                    });\n\n                  case 7:\n                    _context7.next = 14;\n                    break;\n\n                  case 9:\n                    _context7.prev = 9;\n                    _context7.t0 = _context7[\"catch\"](0);\n                    notification('warning', _context7.t0.message);\n                    _context7.next = 14;\n                    return put({\n                      type: actions.UPDATE_AMENITY_FAILURE,\n                      error: _context7.t0.message\n                    });\n\n                  case 14:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee4, null, [[0, 9]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function deleteAmenity() {\n  return _regeneratorRuntime.wrap(function deleteAmenity$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeEvery(actions.DELETE_AMENITY_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee5$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    _context9.prev = 0;\n                    _context9.next = 3;\n                    return call(amenityApi[\"delete\"], payload.amenityId);\n\n                  case 3:\n                    res = _context9.sent;\n                    notification('success', 'Amenity has been deleted successfully');\n                    Router.push('/admin/amenity');\n                    _context9.next = 8;\n                    return put({\n                      type: actions.DELETE_AMENITY_SUCCESS,\n                      amenityId: payload.amenityId\n                    });\n\n                  case 8:\n                    _context9.next = 15;\n                    break;\n\n                  case 10:\n                    _context9.prev = 10;\n                    _context9.t0 = _context9[\"catch\"](0);\n                    notification('warning', _context9.t0.message);\n                    _context9.next = 15;\n                    return put({\n                      type: actions.DELETE_AMENITY_FAILURE,\n                      error: _context9.t0.message\n                    });\n\n                  case 15:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _callee5, null, [[0, 10]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked5);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([call(getAllAmenities), fork(getAmenity), fork(addAmenity), fork(updateAmenity), fork(deleteAmenity)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked6);\n}","map":null,"metadata":{},"sourceType":"module"}