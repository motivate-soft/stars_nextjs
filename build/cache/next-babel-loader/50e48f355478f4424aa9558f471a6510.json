{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport Box from \"@iso/components/utility/box\";\nimport HelperText from \"@iso/components/utility/helper-text\";\nimport Scrollbars from \"@iso/components/utility/customScrollBar\";\nimport TableWrapper from \"@iso/containers/Tables/AntTables/AntTables.styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport propertyActions from \"@redux/properties/actions\";\nvar tableColumns = [{\n  title: \"ID\",\n  key: \"id\",\n  width: 100,\n  render: function render(object) {\n    return __jsx(\"p\", null, object.id);\n  }\n}, {\n  title: \"Name\",\n  key: \"name\",\n  width: 100,\n  render: function render(object) {\n    return __jsx(\"p\", null, object.name);\n  }\n}, {\n  title: \"Address\",\n  key: \"address\",\n  width: 200,\n  render: function render(object) {\n    return __jsx(\"p\", null, object.address);\n  }\n}];\nexport default function SimilarProperty(props) {\n  var propertyId = props.propertyId,\n      selectedItems = props.selectedItems,\n      onRowSelection = props.onRowSelection;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.Properties;\n  }),\n      items = _useSelector.items,\n      loading = _useSelector.loading;\n\n  var _useState = useState({\n    columns: tableColumns,\n    dataList: items\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    dispatch(propertyActions.getAllProperties());\n  }, []);\n  useEffect(function () {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      dataList: items.filter(function (item) {\n        return item.id !== propertyId;\n      })\n    }));\n  }, [items]);\n  var columns = state.columns,\n      dataList = state.dataList;\n  var rowSelection = {\n    selectedRowKeys: selectedItems,\n    onChange: function onChange(selectedRowKeys, selectedRows) {\n      onRowSelection(selectedRowKeys);\n    },\n    getCheckboxProps: function getCheckboxProps(record) {\n      return {\n        // disabled: selectedItems.findIndex(item => item === parseInt(record.id)) > -1,\n        // disabled: record.name === 'Disabled User',\n        name: record && (record === null || record === void 0 ? void 0 : record.id)\n      };\n    }\n  };\n  return __jsx(Box, null, dataList && (dataList === null || dataList === void 0 ? void 0 : dataList.length) === 0 ? __jsx(HelperText, {\n    text: \"No Properties found\"\n  }) : __jsx(\"div\", {\n    className: \"isoPropertyTable\"\n  }, __jsx(Scrollbars, {\n    style: {\n      width: \"100%\",\n      height: \"calc(60vh - 70px)\"\n    }\n  }, __jsx(TableWrapper, {\n    rowKey: \"id\",\n    rowSelection: _objectSpread({\n      type: 'checkbox'\n    }, rowSelection),\n    columns: columns,\n    dataSource: dataList,\n    className: \"propertyListTable\"\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}