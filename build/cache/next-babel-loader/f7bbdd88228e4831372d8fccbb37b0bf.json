{"ast":null,"code":"import { all, takeEvery, fork, takeLatest, call, put } from 'redux-saga/effects';\nimport actions from './actions';\nimport { notification } from \"@iso/components\";\nimport userApi from \"../../service/userApi\";\nimport { Router } from \"next/router\";\nexport function* getAllUsers() {\n  yield takeLatest(actions.GET_ALL_USERS_REQUEST, function* () {\n    try {\n      const res = yield call(userApi.getAll);\n      yield put({\n        type: actions.GET_ALL_USERS_SUCCESS,\n        items: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.GET_ALL_USERS_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* getUser() {\n  yield takeEvery(actions.GET_USER_REQUEST, function* (payload) {\n    try {\n      const res = yield call(userApi.getOne, payload.userId);\n      yield put({\n        type: actions.GET_USER_SUCCESS,\n        item: res\n      });\n    } catch (e) {\n      yield put({\n        type: actions.GET_USER_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* addUser() {\n  yield takeEvery(actions.ADD_USER_REQUEST, function* (payload) {\n    try {\n      const res = yield call(userApi.add, payload.user);\n      notification('success', 'New user created successfully!');\n      yield put({\n        type: actions.ADD_USER_REQUEST,\n        item: res\n      });\n    } catch (e) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.ADD_USER_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* updateUser() {\n  yield takeEvery(actions.UPDATE_USER_REQUEST, function* (payload) {\n    try {\n      const res = yield call(userApi.update, payload.user);\n      notification('success', 'User has been updated successfully!');\n      yield put({\n        type: actions.UPDATE_USER_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.UPDATE_USER_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* deleteUser() {\n  yield takeEvery(actions.DELETE_USER_REQUEST, function* (payload) {\n    try {\n      const res = yield call(userApi.delete, payload.userId);\n      notification('success', 'User has been deleted successfully!');\n      Router.push('/admin/user');\n      yield put({\n        type: actions.DELETE_USER_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.UPDATE_USER_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport default function* rootSaga() {\n  yield all([call(getAllUsers), fork(getUser), fork(addUser), fork(updateUser), fork(deleteUser)]);\n}","map":null,"metadata":{},"sourceType":"module"}