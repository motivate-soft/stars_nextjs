{"ast":null,"code":"import _Modal from \"antd/lib/modal\";\nimport _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _Button from \"antd/lib/button\";\nvar _jsxFileName = \"E:\\\\Projects\\\\starsofboston\\\\next-django\\\\isomorphic-next\\\\components\\\\Admin\\\\Property\\\\FeaturedImage\\\\CropImage.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from \"react\";\nimport Box from \"@iso/ui/Box/Box\";\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { BACKEND_URL } from \"../../../../env-config\";\nimport { getCookie } from \"@redux/authentication/auth.utils\";\nimport { notification } from \"@iso/components\";\nconst cropSetting = {\n  unit: '%',\n  width: 80,\n  height: 40 // aspect: 16 / 9,\n\n};\nexport default function CropImage(props) {\n  const {\n    imageTitle,\n    imagePath,\n    onUploadSuccess\n  } = props;\n  const {\n    0: crop,\n    1: setCrop\n  } = useState(cropSetting);\n  const {\n    0: croppedImage,\n    1: setCroppedImage\n  } = useState(null);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const imageRef = useRef(null);\n\n  function showModal() {\n    setVisible(true);\n  }\n\n  function handleCancel() {\n    setVisible(false);\n  }\n\n  function onImageLoaded(image) {\n    imageRef.current = image;\n    console.log(\"onImageLoaded\", imageRef);\n  }\n\n  function onCropComplete(crop) {\n    makeClientCrop(crop);\n  }\n\n  function onCropChange(crop, percentCrop) {\n    setCrop(crop);\n  }\n\n  async function makeClientCrop(crop) {\n    if (imageRef.current && crop.width && crop.height) {\n      const newCroppedImage = await getCroppedImg(imageRef.current, crop, 'crop.jpeg');\n      setCroppedImage(newCroppedImage);\n    }\n  }\n\n  function getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = Math.ceil(crop.width * scaleX);\n    canvas.height = Math.ceil(crop.height * scaleY);\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width * scaleX, crop.height * scaleY);\n    return canvas.toDataURL('image/jpeg'); // return new Promise((resolve, reject) => {\n    //     canvas.toBlob(blob => {\n    //         if (!blob) {\n    //             //reject(new Error('Canvas is empty'))\n    //             console.error('Canvas is empty')\n    //             return\n    //         }\n    //         blob.name = fileName\n    //         window.URL.revokeObjectURL(fileUrl)\n    //         fileUrl = window.URL.createObjectURL(blob)\n    //         resolve(fileUrl)\n    //     }, 'image/jpeg')\n    // })\n  }\n\n  function handleSaveCroppedImage(image) {\n    setVisible(false);\n    const media = {\n      title: imageTitle,\n      imageData: croppedImage\n    };\n    fetch(`${BACKEND_URL}/api/media/create`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${getCookie(\"token\")}`\n      },\n      body: JSON.stringify(media)\n    }).then(res => res.json()).then(res => {\n      console.log(\"handleSaveCroppedImage\", res);\n      onUploadSuccess(res);\n      notification('success', 'Cropped image saved!');\n    }).catch(error => error);\n  } // function handleDeleteImage(id) {\n  // }\n\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 12\n    }\n  }, __jsx(_Button, {\n    type: \"primary\",\n    onClick: showModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"Crop\"), __jsx(_Modal, {\n    visible: visible,\n    className: \"crop-modal\",\n    title: \"Crop image\",\n    okText: \"Save\",\n    onOk: handleSaveCroppedImage,\n    onCancel: handleCancel // footer={[\n    //     <Button key=\"save\" type=\"primary\" onClick={handleSaveCroppedImage}>\n    //         Save\n    //     </Button>,\n    //     <Button\n    //         key=\"cancel\"\n    //         type=\"default\"\n    //         onClick={handleCancel}\n    //     >\n    //         Cancel\n    //     </Button>,\n    // ]}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, __jsx(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, __jsx(_Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, __jsx(_Col, {\n    sm: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }\n  }, imagePath && __jsx(ReactCrop, {\n    className: \"d-block mx-auto\",\n    src: imagePath,\n    crossorigin: \"*\",\n    crop: crop,\n    ruleOfThirds: true,\n    onImageLoaded: onImageLoaded,\n    onComplete: onCropComplete,\n    onChange: onCropChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }\n  })), __jsx(_Col, {\n    sm: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 21\n    }\n  }, croppedImage && __jsx(\"img\", {\n    alt: \"Crop\",\n    style: {\n      width: '100%'\n    },\n    crossOrigin: \"*\",\n    src: croppedImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 29\n    }\n  }))))));\n}","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/components/Admin/Property/FeaturedImage/CropImage.js"],"names":["React","useRef","useState","Box","ReactCrop","BACKEND_URL","getCookie","notification","cropSetting","unit","width","height","CropImage","props","imageTitle","imagePath","onUploadSuccess","crop","setCrop","croppedImage","setCroppedImage","visible","setVisible","imageRef","showModal","handleCancel","onImageLoaded","image","current","console","log","onCropComplete","makeClientCrop","onCropChange","percentCrop","newCroppedImage","getCroppedImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","Math","ceil","ctx","getContext","drawImage","x","y","toDataURL","handleSaveCroppedImage","media","title","imageData","fetch","method","headers","Accept","Authorization","body","JSON","stringify","then","res","json","catch","error"],"mappings":"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","sourcesContent":["import React, {useRef, useState} from \"react\";\r\nimport {Button, Row, Col, Modal} from \"antd\";\r\nimport Box from \"@iso/ui/Box/Box\";\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport {BACKEND_URL} from \"../../../../env-config\";\r\nimport {getCookie} from \"@redux/authentication/auth.utils\";\r\nimport {notification} from \"@iso/components\";\r\n\r\nconst cropSetting = {\r\n    unit: '%',\r\n    width: 80,\r\n    height: 40\r\n    // aspect: 16 / 9,\r\n}\r\n\r\nexport default function CropImage(props) {\r\n    const {imageTitle, imagePath, onUploadSuccess} = props\r\n\r\n    const [crop, setCrop] = useState(cropSetting)\r\n    const [croppedImage, setCroppedImage] = useState(null)\r\n    const [visible, setVisible] = useState(false);\r\n\r\n    const imageRef = useRef(null)\r\n\r\n    function showModal() {\r\n        setVisible(true);\r\n    }\r\n\r\n    function handleCancel() {\r\n        setVisible(false);\r\n    }\r\n\r\n    function onImageLoaded(image) {\r\n        imageRef.current = image\r\n        console.log(\"onImageLoaded\", imageRef)\r\n    }\r\n\r\n    function onCropComplete(crop) {\r\n        makeClientCrop(crop);\r\n    }\r\n\r\n    function onCropChange(crop, percentCrop) {\r\n        setCrop(crop)\r\n    }\r\n\r\n    async function makeClientCrop(crop) {\r\n        if (imageRef.current && crop.width && crop.height) {\r\n            const newCroppedImage = await getCroppedImg(imageRef.current, crop, 'crop.jpeg');\r\n            setCroppedImage(newCroppedImage)\r\n        }\r\n    }\r\n\r\n    function getCroppedImg(image, crop, fileName) {\r\n        const canvas = document.createElement('canvas');\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = Math.ceil(crop.width * scaleX);\r\n        canvas.height = Math.ceil(crop.height * scaleY);\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY\r\n        );\r\n\r\n        return canvas.toDataURL('image/jpeg');\r\n\r\n        // return new Promise((resolve, reject) => {\r\n        //     canvas.toBlob(blob => {\r\n        //         if (!blob) {\r\n        //             //reject(new Error('Canvas is empty'))\r\n        //             console.error('Canvas is empty')\r\n        //             return\r\n        //         }\r\n        //         blob.name = fileName\r\n        //         window.URL.revokeObjectURL(fileUrl)\r\n        //         fileUrl = window.URL.createObjectURL(blob)\r\n        //         resolve(fileUrl)\r\n        //     }, 'image/jpeg')\r\n        // })\r\n    }\r\n\r\n    function handleSaveCroppedImage(image) {\r\n        setVisible(false)\r\n        const media = {\r\n            title: imageTitle,\r\n            imageData: croppedImage,\r\n        }\r\n\r\n        fetch(`${BACKEND_URL}/api/media/create`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${getCookie(\"token\")}`,\r\n            },\r\n            body: JSON.stringify(media),\r\n        })\r\n            .then((res) => res.json())\r\n            .then((res) => {\r\n                console.log(\"handleSaveCroppedImage\", res)\r\n                onUploadSuccess(res)\r\n                notification('success', 'Cropped image saved!')\r\n            })\r\n            .catch((error) => error)\r\n    }\r\n\r\n    // function handleDeleteImage(id) {\r\n    // }\r\n\r\n    return <div>\r\n        <Button type=\"primary\" onClick={showModal}>Crop</Button>\r\n        <Modal\r\n            visible={visible}\r\n            className=\"crop-modal\"\r\n            title=\"Crop image\"\r\n            okText=\"Save\"\r\n            onOk={handleSaveCroppedImage}\r\n            onCancel={handleCancel}\r\n            // footer={[\r\n            //     <Button key=\"save\" type=\"primary\" onClick={handleSaveCroppedImage}>\r\n            //         Save\r\n            //     </Button>,\r\n            //     <Button\r\n            //         key=\"cancel\"\r\n            //         type=\"default\"\r\n            //         onClick={handleCancel}\r\n            //     >\r\n            //         Cancel\r\n            //     </Button>,\r\n            // ]}\r\n        >\r\n            <Box>\r\n                <Row>\r\n                    <Col sm={16}>\r\n                        {imagePath && (\r\n                            <ReactCrop\r\n                                className=\"d-block mx-auto\"\r\n                                src={imagePath}\r\n                                crossorigin=\"*\"\r\n                                crop={crop}\r\n                                ruleOfThirds\r\n                                onImageLoaded={onImageLoaded}\r\n                                onComplete={onCropComplete}\r\n                                onChange={onCropChange}\r\n                            />\r\n                        )}\r\n                    </Col>\r\n                    <Col sm={8}>\r\n                        {croppedImage && (\r\n                            <img\r\n                                alt=\"Crop\"\r\n                                style={{width: '100%'}}\r\n                                crossOrigin=\"*\"\r\n                                src={croppedImage}\r\n                            />\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n            </Box>\r\n        </Modal>\r\n    </div>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}