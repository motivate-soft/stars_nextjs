{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport Box from \"@iso/components/utility/box\";\nimport HelperText from \"@iso/components/utility/helper-text\";\nimport Scrollbars from \"@iso/components/utility/customScrollBar\";\nimport TableWrapper from \"@iso/containers/Tables/AntTables/AntTables.styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport propertyActions from \"@redux/properties/actions\";\nconst tableColumns = [{\n  title: \"ID\",\n  key: \"id\",\n  width: 100,\n  render: object => __jsx(\"p\", null, object.id)\n}, {\n  title: \"Name\",\n  key: \"name\",\n  width: 100,\n  render: object => __jsx(\"p\", null, object.name)\n}, {\n  title: \"Address\",\n  key: \"address\",\n  width: 200,\n  render: object => __jsx(\"p\", null, object.address)\n}];\nexport default function SimilarProperty(props) {\n  const {\n    propertyId,\n    selectedItems,\n    onRowSelection\n  } = props;\n  const dispatch = useDispatch();\n  const {\n    items,\n    loading\n  } = useSelector(state => state.Properties);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    columns: tableColumns,\n    dataList: items\n  });\n  useEffect(() => {\n    dispatch(propertyActions.getAllProperties());\n  }, []);\n  useEffect(() => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      dataList: items.filter(item => item.id !== propertyId)\n    }));\n  }, [items]);\n  const {\n    columns,\n    dataList\n  } = state;\n  const rowSelection = {\n    selectedRowKeys: selectedItems,\n    onChange: (selectedRowKeys, selectedRows) => {\n      onRowSelection(selectedRowKeys);\n    },\n    getCheckboxProps: record => ({\n      // disabled: selectedItems.findIndex(item => item === parseInt(record.id)) > -1,\n      // disabled: record.name === 'Disabled User',\n      name: record && (record === null || record === void 0 ? void 0 : record.id)\n    })\n  };\n  return __jsx(Box, null, dataList && (dataList === null || dataList === void 0 ? void 0 : dataList.length) === 0 ? __jsx(HelperText, {\n    text: \"No Properties found\"\n  }) : __jsx(\"div\", {\n    className: \"isoPropertyTable\"\n  }, __jsx(Scrollbars, {\n    style: {\n      width: \"100%\",\n      height: \"calc(60vh - 70px)\"\n    }\n  }, __jsx(TableWrapper, {\n    rowKey: \"id\",\n    rowSelection: _objectSpread({\n      type: 'checkbox'\n    }, rowSelection),\n    columns: columns,\n    dataSource: dataList,\n    className: \"propertyListTable\"\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}