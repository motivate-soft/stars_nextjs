{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(jwtLoginRequest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logoutRequest),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loginSuccess),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loginError),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(onLogout),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeLatest, put, call, fork } from 'redux-saga/effects';\nimport { logout, removeCookie, setCookie } from './auth.utils';\nimport { notification } from '@iso/components';\nimport JwtAuthentication from './jwtAuthentication';\nimport actions from './actions';\nimport jwtDecode from \"jwt-decode\";\nexport function jwtLoginRequest() {\n  return _regeneratorRuntime.wrap(function jwtLoginRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.JWT_LOGIN_REQUEST_START, /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n            var _ref$payload, userInfo, history, res, token, profile;\n\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _ref$payload = _ref.payload, userInfo = _ref$payload.userInfo, history = _ref$payload.history;\n                    _context.prev = 1;\n                    _context.next = 4;\n                    return call(JwtAuthentication.login, userInfo);\n\n                  case 4:\n                    res = _context.sent;\n\n                    if (!res.access) {\n                      _context.next = 13;\n                      break;\n                    }\n\n                    token = res.access;\n                    profile = jwtDecode(res.access);\n                    notification('success', 'login success');\n                    _context.next = 11;\n                    return put({\n                      type: actions.LOGIN_REQUEST_SUCCESS,\n                      token: token,\n                      profile: profile\n                    });\n\n                  case 11:\n                    _context.next = 16;\n                    break;\n\n                  case 13:\n                    notification('warning', 'Response type is invalid');\n                    _context.next = 16;\n                    return put(actions.loginRequestFailure(\"Invalid server response\"));\n\n                  case 16:\n                    _context.next = 23;\n                    break;\n\n                  case 18:\n                    _context.prev = 18;\n                    _context.t0 = _context[\"catch\"](1);\n                    notification('error', _context.t0.message);\n                    _context.next = 23;\n                    return put(actions.loginRequestFailure(_context.t0.message));\n\n                  case 23:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[1, 18]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction logoutRequest() {\n  return _regeneratorRuntime.wrap(function logoutRequest$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logout);\n\n        case 3:\n          _context3.next = 5;\n          return put(actions.logoutRequestSuccess());\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put(actions.logoutRequestFailure(_context3.t0));\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nexport function loginSuccess() {\n  return _regeneratorRuntime.wrap(function loginSuccess$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(actions.LOGIN_REQUEST_SUCCESS, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload) {\n            return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    setCookie('login_saga', payload.token);\n                    _context4.next = 3;\n                    return setCookie('token', payload.token);\n\n                  case 3:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function loginError() {\n  return _regeneratorRuntime.wrap(function loginError$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(actions.LOGOUT_REQUEST_FAILURE, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n            return _regeneratorRuntime.wrap(function _callee3$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    console.log(\"loginError\", payload);\n\n                  case 1:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function onLogout() {\n  return _regeneratorRuntime.wrap(function onLogout$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(actions.LOGOUT_REQUEST_START, logoutRequest);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked5);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([call(jwtLoginRequest), call(loginSuccess), call(onLogout)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked6);\n}","map":null,"metadata":{},"sourceType":"module"}