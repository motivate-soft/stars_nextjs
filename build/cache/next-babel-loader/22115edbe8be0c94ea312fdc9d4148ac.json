{"ast":null,"code":"import _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _Button from \"antd/lib/button\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport BookingCalculationFormWrapper, { BillWrapper, FieldWrapper, ItemWrapper, RoomGuestWrapper } from './BookingCalculationForm.style.js';\nimport DateRangePickerBox from \"@iso/components/DatePicker/ReactDates\";\nimport ViewWithPopup from \"@components/Common/ViewWithPopup/ViewWithPopup\";\nimport InputIncDec from \"@components/Common/InputIncDec/InputIncDec\";\nimport { BookingContext } from \"@context/BookingProvider\";\nimport { useRouter } from \"next/router\";\nimport moment from 'moment';\nimport { notification } from \"@iso/components\";\nimport Loader from '@iso/components/utility/loader';\n\nfunction BookingCalculationForm({\n  property,\n  disabled\n}) {\n  const {\n    min_sleeps,\n    price,\n    checked_dates,\n    pricing_items,\n    tax_rate,\n    cleaning_fee,\n    refundable_amount,\n    transactionfee_rate\n  } = property;\n  const {\n    state,\n    dispatch\n  } = useContext(BookingContext);\n  const {\n    0: formState,\n    1: setFormState\n  } = useState({\n    checkinDate: state.checkinDate ? moment(state.checkinDate) : null,\n    checkoutDate: state.checkoutDate ? moment(state.checkoutDate) : null,\n    adults: state.adults,\n    children: state.children\n  });\n  const {\n    0: billState,\n    1: setBillState\n  } = useState(null);\n  const {\n    0: isCalculating,\n    1: setIsCalculating\n  } = useState(null);\n  const router = useRouter();\n  useEffect(() => {\n    console.log(\"___BookingCalculationForm: BookingContext___\", state);\n\n    if (disabled) {\n      setBillState({\n        nights: state.nights,\n        propertyFee: state.propertyFee,\n        tax: state.tax,\n        transactionFee: state.transactionFee,\n        cleaningFee: state.cleaningFee,\n        refundableAmount: state.refundableAmount,\n        total: state.total\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (formState.checkinDate !== null && formState.checkoutDate !== null && formState.adults !== 0) {\n      setIsCalculating(true);\n      const bill = calculateBookingCost(formState.checkinDate, formState.checkoutDate);\n      setBillState(bill);\n      dispatch({\n        type: 'UPDATE_BOOKING_INFORMATION',\n        payload: _objectSpread(_objectSpread(_objectSpread({}, state), formState), bill)\n      });\n      setTimeout(() => {\n        setIsCalculating(false);\n      }, 1000);\n    } else {\n      setBillState(null);\n    }\n  }, [formState]);\n\n  const handleIncrement = type => {\n    setFormState(_objectSpread(_objectSpread({}, formState), {}, {\n      [type]: parseInt(formState[type]) + 1\n    }));\n  };\n\n  const handleDecrement = type => {\n    if (formState[type] <= 0) {\n      return false;\n    }\n\n    setFormState(_objectSpread(_objectSpread({}, formState), {}, {\n      [type]: parseInt(formState[type]) - 1\n    }));\n  };\n\n  const handleIncDecOnChnage = (e, type) => {\n    let currentValue = e.target.value;\n    setFormState(_objectSpread(_objectSpread({}, formState), {}, {\n      [type]: parseInt(currentValue)\n    }));\n  };\n\n  const updateSearchDataFunc = value => {\n    console.log(\"updateSearchDataFunc\", value);\n    setFormState(_objectSpread(_objectSpread({}, formState), {}, {\n      checkinDate: value.setStartDate,\n      checkoutDate: value.setEndDate\n    }));\n  };\n\n  const isDayBooked = day => {\n    return checked_dates.some((range, index) => !!(day.isSameOrAfter(range.arrival_date, 'day') && day.isSameOrBefore(range.departure_date, 'day')));\n  };\n\n  const isDayBlocked = day => {\n    if (moment(day) < moment().startOf('day')) {\n      return true;\n    }\n\n    return isDayBooked(day) === true;\n  };\n\n  const renderDayContents = day => {\n    // console.log(\"renderDayContents\", day)\n    let dayPrice = price;\n\n    if (moment(day) < moment().startOf('day')) {\n      return __jsx(\"div\", {\n        className: \"past-date\"\n      }, __jsx(\"h6\", null, day.format('D')));\n    } else {\n      if (isDayBooked(day) === true) {\n        return __jsx(\"div\", {\n          className: \"booked-date\"\n        }, __jsx(\"h6\", null, day.format('D')));\n      } else {\n        pricing_items.map(item => {\n          if (moment(day) > moment(new Date(item.start_date)) && moment(day) < moment(new Date(item.end_date))) {\n            dayPrice = item.price;\n          }\n        });\n        return __jsx(\"div\", {\n          className: \"date\"\n        }, __jsx(\"h6\", null, day.format('D')), __jsx(\"span\", null, \"$\", price));\n      }\n    }\n  };\n\n  const getDayPrice = date => {\n    let dayPrice = price;\n    pricing_items.map(item => {\n      if (moment(date).diff(item.start_date) >= 0 && moment(date).diff(item.end_date) <= 0) {\n        dayPrice = item.price;\n      }\n    });\n    return dayPrice;\n  };\n\n  const formatToFloat = value => {\n    return parseFloat(value.toFixed(2));\n  };\n\n  const calculateBookingCost = (checkinDate, checkoutDate) => {\n    console.log(\"calculateBookingCost\");\n    let nights,\n        propertyFee = 0,\n        tax,\n        subTotal,\n        transactionFee,\n        total;\n    nights = moment(checkoutDate).diff(moment(checkinDate), 'day');\n    let currDate = moment(checkinDate).startOf('day');\n    let lastDate = moment(checkoutDate).startOf('day');\n\n    do {\n      propertyFee += getDayPrice(currDate.clone().toDate());\n      console.log(\"currentDate\", currDate, getDayPrice(currDate.clone().toDate()));\n    } while (currDate.add(1, 'days').diff(lastDate) <= 0);\n\n    tax = formatToFloat(tax_rate * propertyFee / 100);\n    subTotal = formatToFloat(propertyFee + tax + +cleaning_fee + refundable_amount);\n    transactionFee = formatToFloat(transactionfee_rate * subTotal / 100);\n    total = formatToFloat((1 + transactionfee_rate / 100) * subTotal);\n    return {\n      nights,\n      propertyFee,\n      tax,\n      transactionFee,\n      cleaningFee: cleaning_fee,\n      refundableAmount: refundable_amount,\n      total\n    };\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (formState.checkinDate === null || formState.checkoutDate === null) {\n      notification('warning', 'Please select dates');\n      return;\n    }\n\n    if (formState.adults === 0) {\n      notification('warning', 'Please input number of guests');\n      return;\n    }\n\n    dispatch({\n      type: 'UPDATE_BOOKING_INFORMATION',\n      payload: _objectSpread(_objectSpread(_objectSpread({}, state), billState), formState)\n    });\n    router.push({\n      pathname: `/checkout-review`\n    }, {\n      pathname: `/checkout-review`\n    }, {\n      shallow: true\n    });\n  };\n\n  return __jsx(BookingCalculationFormWrapper, {\n    className: \"form-container\",\n    onSubmit: handleSubmit\n  }, __jsx(FieldWrapper, null, __jsx(DateRangePickerBox, {\n    disabled: disabled,\n    startDate: formState.checkinDate,\n    endDate: formState.checkoutDate,\n    startDatePlaceholderText: \"Check In\",\n    endDatePlaceholderText: \"Check Out\",\n    startDateId: \"startDateId-id\",\n    endDateId: \"endDateId-id\",\n    showClearDates: true,\n    small: true,\n    minimumNights: min_sleeps,\n    numberOfMonths: 1,\n    updateSearchData: value => updateSearchDataFunc(value),\n    isDayBlocked: day => isDayBlocked(day),\n    renderDayContents: day => renderDayContents(day)\n  })), __jsx(FieldWrapper, null, __jsx(ViewWithPopup, {\n    key: 200,\n    noView: true,\n    className: formState.adults || formState.children ? 'activated' : '',\n    view: __jsx(_Button, {\n      type: \"default\"\n    }, __jsx(\"span\", null, \"Adults \", formState.adults > 0 && `: ${formState.adults}`), __jsx(\"span\", null, \"-\"), __jsx(\"span\", null, \"Children\", formState.children > 0 && `: ${formState.children}`)),\n    popup: __jsx(RoomGuestWrapper, null, __jsx(ItemWrapper, null, __jsx(\"strong\", null, \"Adults\"), __jsx(InputIncDec, {\n      id: \"adults\",\n      increment: () => handleIncrement('adults'),\n      decrement: () => handleDecrement('adults'),\n      onChange: e => handleIncDecOnChnage(e, 'adults'),\n      value: formState.adults\n    })), __jsx(ItemWrapper, null, __jsx(\"strong\", null, \"Children\"), __jsx(InputIncDec, {\n      id: \"children\",\n      increment: () => handleIncrement('children'),\n      decrement: () => handleDecrement('children'),\n      onChange: e => handleIncDecOnChnage(e, 'children'),\n      value: formState.children\n    })))\n  })), isCalculating && __jsx(Loader, null), billState && !isCalculating && __jsx(BillWrapper, null, __jsx(_Row, null, __jsx(_Col, {\n    sm: 12\n  }, console.log(\"___billState\", billState), __jsx(\"ul\", null, __jsx(\"li\", null, billState === null || billState === void 0 ? void 0 : billState.nights, \" nights\"), __jsx(\"li\", null, \"Cleaning fee\"), __jsx(\"li\", null, \"Security deposit\"), __jsx(\"li\", null, \"Transaction fee (\", property === null || property === void 0 ? void 0 : property.transactionfee_rate, \"%)\"), __jsx(\"li\", null, \"Tax (\", property === null || property === void 0 ? void 0 : property.tax_rate, \"%)\"))), __jsx(_Col, {\n    sm: 12\n  }, __jsx(\"ul\", {\n    className: \"cost-list\"\n  }, __jsx(\"li\", null, \"$\", billState === null || billState === void 0 ? void 0 : billState.propertyFee), __jsx(\"li\", null, \"$\", billState === null || billState === void 0 ? void 0 : billState.cleaningFee), __jsx(\"li\", null, \"$\", billState === null || billState === void 0 ? void 0 : billState.refundableAmount), __jsx(\"li\", null, \"$\", billState === null || billState === void 0 ? void 0 : billState.transactionFee), __jsx(\"li\", null, \"$\", billState === null || billState === void 0 ? void 0 : billState.tax)))), __jsx(\"hr\", null), __jsx(_Row, null, __jsx(_Col, {\n    sm: 18\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, \"Total\"))), __jsx(_Col, {\n    sm: 6\n  }, __jsx(\"ul\", {\n    className: \"cost-list\"\n  }, __jsx(\"li\", null, \"$\", billState === null || billState === void 0 ? void 0 : billState.total))))), __jsx(\"p\", null, \"For booking assistance please \", __jsx(Link, {\n    href: \"/contact\"\n  }, \"contact us\")));\n}\n\n;\nexport default BookingCalculationForm;","map":null,"metadata":{},"sourceType":"module"}