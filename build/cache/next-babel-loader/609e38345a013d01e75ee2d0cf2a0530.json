{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\Projects\\\\starsofboston\\\\next-django\\\\isomorphic-next\\\\components\\\\Admin\\\\Property\\\\Dropzone\\\\Dropzone.js\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Dropzone from \"@iso/components/uielements/dropzone\";\nimport { notification } from \"@iso/components\";\nimport Box from \"@iso/components/utility/box\";\nimport LayoutWrapper from \"@iso/components/utility/layoutWrapper\";\nimport ContentHolder from \"@iso/components/utility/contentHolder\";\nimport DropzoneWrapper from \"./Dropzone.styles\";\nimport { getCookie } from \"@redux/authentication/auth.utils\";\nimport { BACKEND_URL } from \"env-config\";\nexport default (function (props) {\n  var onUploadSuccess = props.onUploadSuccess;\n  var componentConfig = {\n    iconFiletypes: [\".jpg\", \".png\", \".gif\"],\n    method: true,\n    showFiletypeIcon: true,\n    uploadMultiple: false,\n    maxFilesize: 2,\n    // MB\n    maxFiles: 2,\n    dictMaxFilesExceeded: \"You can only upload upto 2 images\",\n    dictRemoveFile: \"Delete\",\n    dictCancelUploadConfirmation: \"Are you sure to cancel upload?\",\n    postUrl: \"no-url\"\n  };\n  var djsConfig = {\n    autoProcessQueue: false\n  };\n  var eventHandlers = {\n    addedfile: function addedfile(file) {\n      return onAddedFile(file);\n    },\n    success: function success(file) {\n      return notification(\"success\", \"\".concat(file.name, \" successfully uploaded\"));\n    },\n    error: function error(_error) {\n      return notification(\"error\", \"Server is not set in the demo\");\n    }\n  };\n\n  function onAddedFile(_x) {\n    return _onAddedFile.apply(this, arguments);\n  } // async function handleAddImage(selectedFiles) {\n  //   if (selectedFiles[0].size > 1024 * 1024 * 10) {\n  //     setError(\"You can only upload files smaller than 10MB.\");\n  //     return;\n  //   }\n  //   if (selectedFiles[0].type.indexOf(\"image\") === -1) {\n  //     setError(\"You can only upload image files.\");\n  //     return;\n  //   }\n  //   let files = new FormData();\n  //   files.append(\"fileToUpload\", selectedFiles[0]);\n  //   setIsUploadingAttachment(true);\n  //   try {\n  //     const response = await postFile(\n  //       `/api/v2/services/${activeService.id}/image`,\n  //       files\n  //     );\n  //     const { imagePath } = response;\n  //     const newServices = services.map((service) => {\n  //       if (service.id === activeService.id) {\n  //         service.imagePath = imagePath;\n  //       }\n  //       return service;\n  //     });\n  //     onImageChange(newServices);\n  //     setIsUploadingAttachment(false);\n  //   } catch (errorMessage) {\n  //     setError(errorMessage);\n  //     setIsUploadingAttachment(false);\n  //   }\n  // }\n  // async function handleDeleteImage() {\n  //   setIsDeletingAttachment(true);\n  //   setError(null);\n  //   try {\n  //     await remove(`/api/v2/services/${activeService.id}/image`);\n  //     const newServices = services.map((service) => {\n  //       if (service.id === activeService.id) {\n  //         service.imagePath = null;\n  //       }\n  //       return service;\n  //     });\n  //     setIsDeletingAttachment(false);\n  //     onImageChange(newServices);\n  //   } catch (errorMessage) {\n  //     setIsDeletingAttachment(false);\n  //     setError(\n  //       \"There was an error deleting this file, please try again. If the problem persists, please contact us.\"\n  //     );\n  //   }\n  // }\n\n\n  function _onAddedFile() {\n    _onAddedFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n      var body, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              notification(\"success\", \"\".concat(file.name, \" added\"));\n              body = new FormData();\n              body.append(\"file\", file);\n              _context.next = 5;\n              return fetch(\"\".concat(BACKEND_URL, \"/api/media/create\"), {\n                method: \"POST\",\n                headers: {\n                  Authorization: \"Bearer \" + getCookie(\"token\")\n                },\n                body: body\n              }).then(function (res) {\n                return res.json();\n              }).then(function (res) {\n                return res;\n              })[\"catch\"](function (error) {\n                return error;\n              });\n\n            case 5:\n              res = _context.sent;\n              onUploadSuccess(res);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _onAddedFile.apply(this, arguments);\n  }\n\n  return __jsx(LayoutWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, __jsx(ContentHolder, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, __jsx(DropzoneWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, __jsx(Dropzone, {\n    config: componentConfig,\n    eventHandlers: eventHandlers,\n    djsConfig: djsConfig,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  })))));\n});","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/components/Admin/Property/Dropzone/Dropzone.js"],"names":["React","Dropzone","notification","Box","LayoutWrapper","ContentHolder","DropzoneWrapper","getCookie","BACKEND_URL","props","onUploadSuccess","componentConfig","iconFiletypes","method","showFiletypeIcon","uploadMultiple","maxFilesize","maxFiles","dictMaxFilesExceeded","dictRemoveFile","dictCancelUploadConfirmation","postUrl","djsConfig","autoProcessQueue","eventHandlers","addedfile","file","onAddedFile","success","name","error","body","FormData","append","fetch","headers","Authorization","then","res","json"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Dropzone from \"@iso/components/uielements/dropzone\";\nimport { notification } from \"@iso/components\";\nimport Box from \"@iso/components/utility/box\";\nimport LayoutWrapper from \"@iso/components/utility/layoutWrapper\";\nimport ContentHolder from \"@iso/components/utility/contentHolder\";\nimport DropzoneWrapper from \"./Dropzone.styles\";\nimport { getCookie } from \"@redux/authentication/auth.utils\";\nimport { BACKEND_URL } from \"env-config\";\n\nexport default (props) => {\n  const { onUploadSuccess } = props;\n\n  const componentConfig = {\n    iconFiletypes: [\".jpg\", \".png\", \".gif\"],\n    method: true,\n    showFiletypeIcon: true,\n    uploadMultiple: false,\n    maxFilesize: 2, // MB\n    maxFiles: 2,\n    dictMaxFilesExceeded: \"You can only upload upto 2 images\",\n    dictRemoveFile: \"Delete\",\n    dictCancelUploadConfirmation: \"Are you sure to cancel upload?\",\n    postUrl: \"no-url\",\n  };\n  const djsConfig = { autoProcessQueue: false };\n  const eventHandlers = {\n    addedfile: (file) => onAddedFile(file),\n    success: (file) =>\n      notification(\"success\", `${file.name} successfully uploaded`),\n    error: (error) => notification(\"error\", \"Server is not set in the demo\"),\n  };\n\n  async function onAddedFile(file) {\n    notification(\"success\", `${file.name} added`);\n    const body = new FormData();\n    body.append(\"file\", file);\n\n    const res = await fetch(`${BACKEND_URL}/api/media/create`, {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + getCookie(\"token\"),\n      },\n      body,\n    })\n      .then((res) => res.json())\n      .then((res) => res)\n      .catch((error) => error);\n    onUploadSuccess(res);\n  }\n\n  // async function handleAddImage(selectedFiles) {\n  //   if (selectedFiles[0].size > 1024 * 1024 * 10) {\n  //     setError(\"You can only upload files smaller than 10MB.\");\n  //     return;\n  //   }\n\n  //   if (selectedFiles[0].type.indexOf(\"image\") === -1) {\n  //     setError(\"You can only upload image files.\");\n  //     return;\n  //   }\n\n  //   let files = new FormData();\n  //   files.append(\"fileToUpload\", selectedFiles[0]);\n\n  //   setIsUploadingAttachment(true);\n\n  //   try {\n  //     const response = await postFile(\n  //       `/api/v2/services/${activeService.id}/image`,\n  //       files\n  //     );\n  //     const { imagePath } = response;\n  //     const newServices = services.map((service) => {\n  //       if (service.id === activeService.id) {\n  //         service.imagePath = imagePath;\n  //       }\n  //       return service;\n  //     });\n  //     onImageChange(newServices);\n  //     setIsUploadingAttachment(false);\n  //   } catch (errorMessage) {\n  //     setError(errorMessage);\n  //     setIsUploadingAttachment(false);\n  //   }\n  // }\n\n  // async function handleDeleteImage() {\n  //   setIsDeletingAttachment(true);\n  //   setError(null);\n  //   try {\n  //     await remove(`/api/v2/services/${activeService.id}/image`);\n\n  //     const newServices = services.map((service) => {\n  //       if (service.id === activeService.id) {\n  //         service.imagePath = null;\n  //       }\n  //       return service;\n  //     });\n  //     setIsDeletingAttachment(false);\n  //     onImageChange(newServices);\n  //   } catch (errorMessage) {\n  //     setIsDeletingAttachment(false);\n  //     setError(\n  //       \"There was an error deleting this file, please try again. If the problem persists, please contact us.\"\n  //     );\n  //   }\n  // }\n\n  return (\n    <LayoutWrapper>\n      <Box>\n        <ContentHolder>\n          <DropzoneWrapper>\n            <Dropzone\n              config={componentConfig}\n              eventHandlers={eventHandlers}\n              djsConfig={djsConfig}\n            />\n          </DropzoneWrapper>\n        </ContentHolder>\n      </Box>\n    </LayoutWrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}