{"ast":null,"code":"import { all, takeEvery, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport actions from \"./actions\";\nimport { notification } from \"@iso/components\";\nimport propertyApi from \"../../service/propertyApi\";\nimport { Router } from \"next/router\";\nexport function* getAllProperties() {\n  yield takeLatest(actions.GET_ALL_PROPERTIES_REQUEST, function* () {\n    try {\n      const res = yield call(propertyApi.getAll);\n      console.log(\"___try\", res);\n      yield put({\n        type: actions.GET_ALL_PROPERTIES_SUCCESS,\n        items: res\n      });\n    } catch (error) {\n      console.log(\"___catch\", error);\n      yield put({\n        type: actions.GET_ALL_PROPERTIES_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* getProperty() {\n  yield takeEvery(actions.GET_PROPERTY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(propertyApi.getOne, payload.propertyId);\n      yield put({\n        type: actions.GET_PROPERTY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.GET_PROPERTY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* addProperty() {\n  yield takeEvery(actions.ADD_PROPERTY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(propertyApi.add, payload.property);\n      notification('success', 'New Property has been created successfully');\n      yield put({\n        type: actions.ADD_PROPERTY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.ADD_PROPERTY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* updateProperty() {\n  yield takeEvery(actions.UPDATE_PROPERTY_REQUEST, function* (payload) {\n    try {\n      const res = yield call(propertyApi.update, payload.property);\n      notification('success', 'Property has been updated successfully');\n      yield put({\n        type: actions.UPDATE_PROPERTY_SUCCESS,\n        item: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.UPDATE_PROPERTY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* deleteProperty() {\n  yield takeEvery(actions.DELETE_PROPERTY_REQUEST, function* (payload) {\n    try {\n      yield call(propertyApi.delete, payload.propertyId);\n      notification('success', 'Property has been deleted successfully');\n      Router.push('/admin/property');\n      yield put({\n        type: actions.DELETE_PROPERTY_SUCCESS,\n        propertyId: payload.propertyId\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.DELETE_PROPERTY_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* getPriceItems() {\n  yield takeLatest(actions.GET_PRICE_ITEMS_REQUEST, function* (payload) {\n    try {\n      const res = yield call(propertyApi.getPriceItems, payload.propertyId);\n      yield put({\n        type: actions.GET_PRICE_ITEMS_SUCCESS,\n        items: res\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.GET_PRICE_ITEMS_FAILURE,\n        error: error.message\n      });\n    }\n  });\n}\nexport function* createPriceItem() {\n  yield takeLatest(actions.CREATE_PRICE_ITEM_REQUEST, function* (payload) {\n    try {\n      const res = yield call(propertyApi.createPriceItem, payload.pricing);\n      yield put({\n        type: actions.CREATE_PRICE_ITEM_SUCCESS\n      });\n      notification('success', 'Pricing item created');\n      yield put({\n        type: actions.GET_PRICE_ITEMS_REQUEST,\n        propertyId: payload.pricing.property\n      });\n    } catch (error) {\n      notification('warning', error.message);\n      yield put({\n        type: actions.CREATE_PRICE_ITEM_FAILURE\n      });\n    }\n  });\n}\nexport default function* rootSaga() {\n  yield all([call(getAllProperties), fork(getProperty), fork(addProperty), fork(updateProperty), fork(deleteProperty), fork(getPriceItems), fork(createPriceItem)]);\n}","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/redux/properties/saga.js"],"names":["all","takeEvery","fork","takeLatest","call","put","actions","notification","propertyApi","Router","getAllProperties","GET_ALL_PROPERTIES_REQUEST","res","getAll","console","log","type","GET_ALL_PROPERTIES_SUCCESS","items","error","GET_ALL_PROPERTIES_FAILURE","message","getProperty","GET_PROPERTY_REQUEST","payload","getOne","propertyId","GET_PROPERTY_SUCCESS","item","GET_PROPERTY_FAILURE","addProperty","ADD_PROPERTY_REQUEST","add","property","ADD_PROPERTY_SUCCESS","ADD_PROPERTY_FAILURE","updateProperty","UPDATE_PROPERTY_REQUEST","update","UPDATE_PROPERTY_SUCCESS","UPDATE_PROPERTY_FAILURE","deleteProperty","DELETE_PROPERTY_REQUEST","delete","push","DELETE_PROPERTY_SUCCESS","DELETE_PROPERTY_FAILURE","getPriceItems","GET_PRICE_ITEMS_REQUEST","GET_PRICE_ITEMS_SUCCESS","GET_PRICE_ITEMS_FAILURE","createPriceItem","CREATE_PRICE_ITEM_REQUEST","pricing","CREATE_PRICE_ITEM_SUCCESS","CREATE_PRICE_ITEM_FAILURE","rootSaga"],"mappings":"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","sourcesContent":["import {\n    all,\n    takeEvery,\n    fork,\n    takeLatest,\n    call,\n    put,\n} from \"redux-saga/effects\";\nimport actions from \"./actions\";\nimport {notification} from \"@iso/components\";\nimport propertyApi from \"../../service/propertyApi\";\nimport {Router} from \"next/router\";\n\nexport function* getAllProperties() {\n    yield takeLatest(actions.GET_ALL_PROPERTIES_REQUEST, function* () {\n        try {\n            const res = yield call(propertyApi.getAll);\n            console.log(\"___try\", res);\n            yield put({\n                type: actions.GET_ALL_PROPERTIES_SUCCESS,\n                items: res,\n            });\n        } catch (error) {\n            console.log(\"___catch\", error);\n            yield put({\n                type: actions.GET_ALL_PROPERTIES_FAILURE,\n                error: error.message,\n            });\n        }\n    });\n}\n\nexport function* getProperty() {\n    yield takeEvery(actions.GET_PROPERTY_REQUEST, function* (payload) {\n        try {\n            const res = yield call(propertyApi.getOne, payload.propertyId);\n            yield put({\n                type: actions.GET_PROPERTY_SUCCESS,\n                item: res,\n            });\n        } catch (error) {\n            notification('warning', error.message)\n            yield put({\n                type: actions.GET_PROPERTY_FAILURE,\n                error: error.message,\n            });\n        }\n    });\n}\n\nexport function* addProperty() {\n    yield takeEvery(actions.ADD_PROPERTY_REQUEST, function* (payload) {\n        try {\n            const res = yield call(propertyApi.add, payload.property);\n            notification('success', 'New Property has been created successfully')\n\n            yield put({\n                type: actions.ADD_PROPERTY_SUCCESS,\n                item: res,\n            });\n        } catch (error) {\n            notification('warning', error.message)\n            yield put({\n                type: actions.ADD_PROPERTY_FAILURE,\n                error: error.message,\n            });\n        }\n    });\n}\n\nexport function* updateProperty() {\n    yield takeEvery(actions.UPDATE_PROPERTY_REQUEST, function* (payload) {\n        try {\n            const res = yield call(propertyApi.update, payload.property);\n            notification('success', 'Property has been updated successfully')\n            yield put({\n                type: actions.UPDATE_PROPERTY_SUCCESS,\n                item: res,\n            });\n        } catch (error) {\n            notification('warning', error.message)\n            yield put({\n                type: actions.UPDATE_PROPERTY_FAILURE,\n                error: error.message,\n            });\n        }\n    });\n}\n\nexport function* deleteProperty() {\n    yield takeEvery(actions.DELETE_PROPERTY_REQUEST, function* (payload) {\n        try {\n            yield call(propertyApi.delete, payload.propertyId);\n            notification('success', 'Property has been deleted successfully')\n\n            Router.push('/admin/property')\n            yield put({\n                type: actions.DELETE_PROPERTY_SUCCESS,\n                propertyId: payload.propertyId,\n            });\n        } catch (error) {\n            notification('warning', error.message)\n            yield put({\n                type: actions.DELETE_PROPERTY_FAILURE,\n                error: error.message,\n            });\n        }\n    });\n}\n\nexport function* getPriceItems() {\n    yield takeLatest(actions.GET_PRICE_ITEMS_REQUEST, function* (payload) {\n        try {\n            const res = yield call(propertyApi.getPriceItems, payload.propertyId);\n            yield put({\n                type: actions.GET_PRICE_ITEMS_SUCCESS,\n                items: res,\n            });\n        } catch (error) {\n            notification('warning', error.message)\n            yield put({\n                type: actions.GET_PRICE_ITEMS_FAILURE,\n                error: error.message,\n            });\n        }\n    });\n}\n\nexport function* createPriceItem() {\n    yield takeLatest(actions.CREATE_PRICE_ITEM_REQUEST, function* (payload) {\n        try {\n            const res = yield call(propertyApi.createPriceItem, payload.pricing);\n            yield put({\n                type: actions.CREATE_PRICE_ITEM_SUCCESS,\n            });\n            notification('success', 'Pricing item created')\n            yield put({\n                type: actions.GET_PRICE_ITEMS_REQUEST,\n                propertyId: payload.pricing.property\n            })\n        } catch (error) {\n            notification('warning', error.message)\n            yield put({\n                type: actions.CREATE_PRICE_ITEM_FAILURE,\n            });\n        }\n    });\n}\n\nexport default function* rootSaga() {\n    yield all([\n        call(getAllProperties),\n        fork(getProperty),\n        fork(addProperty),\n        fork(updateProperty),\n        fork(deleteProperty),\n        fork(getPriceItems),\n        fork(createPriceItem),\n    ]);\n}\n"]},"metadata":{},"sourceType":"module"}