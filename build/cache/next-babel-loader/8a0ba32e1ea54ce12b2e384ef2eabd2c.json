{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getAllPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(updatePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(deletePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport actions from \"./actions\";\nimport { notification } from \"@iso/components\";\nimport postApi from \"../../service/postApi\";\nexport function getAllPosts() {\n  return _regeneratorRuntime.wrap(function getAllPosts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.GET_ALL_POSTS_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(postApi.getAll);\n\n                  case 3:\n                    res = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: actions.GET_ALL_POSTS_SUCCESS,\n                      items: res\n                    });\n\n                  case 6:\n                    _context.next = 12;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    _context.next = 12;\n                    return put({\n                      type: actions.GET_ALL_POSTS_FAILURE,\n                      error: _context.t0.message\n                    });\n\n                  case 12:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\nexport function getPost() {\n  return _regeneratorRuntime.wrap(function getPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(actions.GET_POST_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return call(postApi.getOne, payload.postId);\n\n                  case 3:\n                    res = _context3.sent;\n                    _context3.next = 6;\n                    return put({\n                      type: actions.GET_POST_SUCCESS,\n                      item: res\n                    });\n\n                  case 6:\n                    _context3.next = 12;\n                    break;\n\n                  case 8:\n                    _context3.prev = 8;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    _context3.next = 12;\n                    return put({\n                      type: actions.GET_POST_FAILURE,\n                      error: _context3.t0.message\n                    });\n\n                  case 12:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee2, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function addPost() {\n  return _regeneratorRuntime.wrap(function addPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(actions.ADD_POST_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.prev = 0;\n                    _context5.next = 3;\n                    return call(postApi.add, payload.post);\n\n                  case 3:\n                    res = _context5.sent;\n                    notification('warning', 'New post created');\n                    _context5.next = 7;\n                    return put({\n                      type: actions.ADD_POST_SUCCESS,\n                      item: res\n                    });\n\n                  case 7:\n                    _context5.next = 14;\n                    break;\n\n                  case 9:\n                    _context5.prev = 9;\n                    _context5.t0 = _context5[\"catch\"](0);\n                    notification('warning', _context5.t0.message);\n                    _context5.next = 14;\n                    return put({\n                      type: actions.ADD_POST_FAILURE,\n                      error: _context5.t0.message\n                    });\n\n                  case 14:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee3, null, [[0, 9]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function updatePost() {\n  return _regeneratorRuntime.wrap(function updatePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(actions.UPDATE_POST_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee4$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.prev = 0;\n                    _context7.next = 3;\n                    return call(postApi.update, payload.post);\n\n                  case 3:\n                    res = _context7.sent;\n                    notification('warning', 'Post has been updated successfully');\n                    _context7.next = 7;\n                    return put({\n                      type: actions.UPDATE_POST_SUCCESS,\n                      item: res\n                    });\n\n                  case 7:\n                    _context7.next = 14;\n                    break;\n\n                  case 9:\n                    _context7.prev = 9;\n                    _context7.t0 = _context7[\"catch\"](0);\n                    notification('warning', _context7.t0.message);\n                    _context7.next = 14;\n                    return put({\n                      type: actions.UPDATE_POST_FAILURE,\n                      error: _context7.t0.message\n                    });\n\n                  case 14:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee4, null, [[0, 9]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function deletePost() {\n  return _regeneratorRuntime.wrap(function deletePost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeEvery(actions.DELETE_POST_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(payload) {\n            return _regeneratorRuntime.wrap(function _callee5$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    _context9.prev = 0;\n                    _context9.next = 3;\n                    return call(postApi[\"delete\"], payload.postId);\n\n                  case 3:\n                    notification('warning', 'Post has been deleted successfully');\n                    _context9.next = 6;\n                    return put({\n                      type: actions.DELETE_POST_SUCCESS,\n                      postId: payload.postId\n                    });\n\n                  case 6:\n                    _context9.next = 13;\n                    break;\n\n                  case 8:\n                    _context9.prev = 8;\n                    _context9.t0 = _context9[\"catch\"](0);\n                    notification('warning', _context9.t0.message);\n                    _context9.next = 13;\n                    return put({\n                      type: actions.DELETE_POST_FAILURE,\n                      error: _context9.t0.message\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _callee5, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked5);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([call(getAllPosts), fork(getPost), fork(addPost), fork(updatePost), fork(deletePost)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/redux/posts/saga.js"],"names":["getAllPosts","getPost","addPost","updatePost","deletePost","rootSaga","all","takeEvery","fork","takeLatest","call","put","actions","notification","postApi","GET_ALL_POSTS_REQUEST","getAll","res","type","GET_ALL_POSTS_SUCCESS","items","GET_ALL_POSTS_FAILURE","error","message","GET_POST_REQUEST","payload","getOne","postId","GET_POST_SUCCESS","item","GET_POST_FAILURE","ADD_POST_REQUEST","add","post","ADD_POST_SUCCESS","ADD_POST_FAILURE","UPDATE_POST_REQUEST","update","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_FAILURE"],"mappings":"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","sourcesContent":["import {\r\n    all,\r\n    takeEvery,\r\n    fork,\r\n    takeLatest,\r\n    call,\r\n    put,\r\n} from \"redux-saga/effects\";\r\nimport actions from \"./actions\";\r\nimport {notification} from \"@iso/components\";\r\nimport postApi from \"../../service/postApi\";\r\n\r\n\r\nexport function* getAllPosts() {\r\n    yield takeLatest(actions.GET_ALL_POSTS_REQUEST, function* () {\r\n        try {\r\n            const res = yield call(postApi.getAll);\r\n\r\n            yield put({\r\n                type: actions.GET_ALL_POSTS_SUCCESS,\r\n                items: res,\r\n            });\r\n        } catch (error) {\r\n\r\n            yield put({\r\n                type: actions.GET_ALL_POSTS_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* getPost() {\r\n    yield takeEvery(actions.GET_POST_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(postApi.getOne, payload.postId);\r\n            yield put({\r\n                type: actions.GET_POST_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            yield put({\r\n                type: actions.GET_POST_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* addPost() {\r\n    yield takeEvery(actions.ADD_POST_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(postApi.add, payload.post);\r\n            notification('warning', 'New post created');\r\n\r\n            yield put({\r\n                type: actions.ADD_POST_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.ADD_POST_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* updatePost() {\r\n    yield takeEvery(actions.UPDATE_POST_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(postApi.update, payload.post);\r\n            notification('warning', 'Post has been updated successfully');\r\n            yield put({\r\n                type: actions.UPDATE_POST_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.UPDATE_POST_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* deletePost() {\r\n    yield takeEvery(actions.DELETE_POST_REQUEST, function* (payload) {\r\n        try {\r\n            yield call(postApi.delete, payload.postId);\r\n            notification('warning', 'Post has been deleted successfully');\r\n\r\n            yield put({\r\n                type: actions.DELETE_POST_SUCCESS,\r\n                postId: payload.postId,\r\n            });\r\n        } catch (error) {\r\n            notification('warning', error.message);\r\n            yield put({\r\n                type: actions.DELETE_POST_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        call(getAllPosts),\r\n        fork(getPost),\r\n        fork(addPost),\r\n        fork(updatePost),\r\n        fork(deletePost),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}