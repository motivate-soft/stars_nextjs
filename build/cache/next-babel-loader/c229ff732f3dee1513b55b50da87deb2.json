{"ast":null,"code":"import _CloseOutlined from \"@ant-design/icons/lib/icons/CloseOutlined\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport PlacesAutocomplete from \"react-places-autocomplete\";\nimport Input from \"@iso/components/uielements/input\";\nimport { FaMapPin } from \"react-icons/fa\";\n\nclass LocationSearchAutoComplete extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", address => {\n      this.setState({\n        address\n      });\n    });\n\n    _defineProperty(this, \"handleSelect\", (address, placeId) => {\n      this.setState({\n        address\n      });\n      const request = {\n        placeId: placeId,\n        fields: [\"name\", \"geometry\", \"address_components\", \"formatted_address\", \"icon\", \"id\", \"name\", \"place_id\", \"reference\", \"scope\", \"types\", \"url\", \"utc_offset\", \"vicinity\"]\n      };\n      this.placesService.getDetails(request, (place, status) => {\n        if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n          this.props.onChange(place);\n          console.log(\"placesService\", place.geometry.location.lat(), place.geometry.location.lng());\n        }\n      });\n    });\n\n    this.state = {\n      address: \"\"\n    }; // if (typeof window !== 'undefined'){\n    //\n    // }\n\n    if (false) {\n      this.placesService = new window.google.maps.places.PlacesService(document.createElement(\"div\"));\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n    this.setState({\n      address: nextProps.value\n    });\n  }\n\n  render() {\n    const {\n      placeholder,\n      name\n    } = this.props;\n    return __jsx(PlacesAutocomplete, {\n      value: this.state.address,\n      onChange: this.handleChange,\n      onSelect: this.handleSelect\n    }, ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => __jsx(\"div\", {\n      className: \"autocomplete-container\"\n    }, __jsx(\"div\", {\n      className: \"place-input-wrapper\"\n    }, __jsx(Input, getInputProps({\n      placeholder: placeholder ? placeholder : \"Search for address...\"\n    })), __jsx(_CloseOutlined, null)), __jsx(\"div\", {\n      className: \"autocomplete-dropdown-container\"\n    }, loading && __jsx(\"div\", null, \"Loading...\"), suggestions.map((suggestion, index) => {\n      const className = suggestion.active ? \"suggestion-item active\" : \"suggestion-item\";\n      return __jsx(\"div\", _extends({\n        key: index\n      }, getSuggestionItemProps(suggestion, {\n        className\n      })), __jsx(FaMapPin, null), __jsx(\"span\", null, suggestion.description));\n    }))));\n  }\n\n}\n\nexport default LocationSearchAutoComplete;","map":null,"metadata":{},"sourceType":"module"}