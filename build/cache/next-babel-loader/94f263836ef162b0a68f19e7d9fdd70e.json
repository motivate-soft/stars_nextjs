{"ast":null,"code":"import _Col from \"antd/lib/col\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { getCookie } from \"@redux/authentication/auth.utils\";\nimport authActions from \"@redux/authentication/actions\";\nimport classNames from \"classnames\";\nimport Loader from \"@iso/components/utility/loader\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { BACKEND_URL } from \"../../../../env-config\";\nexport default function InfiniteGallery(props) {\n  var selectedItem = props.selectedItem,\n      onSelectImage = props.onSelectImage;\n\n  var _useState = useState([]),\n      items = _useState[0],\n      setItems = _useState[1];\n\n  var _useState2 = useState(true),\n      hasMore = _useState2[0],\n      setHasMore = _useState2[1];\n\n  var _useState3 = useState(null),\n      nextHref = _useState3[0],\n      setNextHref = _useState3[1];\n\n  useEffect(function () {\n    fetchInitialData();\n  }, []);\n\n  function fetchInitialData() {\n    fetch(\"\".concat(BACKEND_URL, \"/api/media/list\"), {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        authorization: \"Bearer \".concat(getCookie(\"token\"))\n      }\n    }).then(function (res) {\n      if (res.status === 401) {\n        authActions.logout();\n      }\n\n      return res.json();\n    }).then(function (res) {\n      if (res.next) {\n        setItems(items.concat(res.results));\n        setNextHref(res.next);\n      } else {\n        setItems(items.concat(res.results));\n        setHasMore(false);\n      }\n    }, function (error) {});\n  }\n\n  function fetchItems() {\n    fetch(\"\".concat(nextHref), {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        authorization: \"Bearer \".concat(getCookie(\"token\"))\n      }\n    }).then(function (res) {\n      if (res.status === 401) {\n        authActions.logout();\n      }\n\n      return res.json();\n    }).then(function (res) {\n      if (res.next) {\n        setItems(items.concat(res.results));\n        setNextHref(res.next);\n      } else {\n        setItems(items.concat(res.results));\n        setHasMore(false);\n      }\n    }, function (error) {\n      console.log(\"error\", error);\n    });\n  }\n\n  return __jsx(\"div\", {\n    id: \"scrollableDiv\" // style={{\n    //   height: 300,\n    //   overflow: \"auto\",\n    //   display: \"flex\",\n    //   flexDirection: \"column-reverse\",\n    // }}\n\n  }, items && __jsx(InfiniteScroll, {\n    style: {\n      height: \"50vh\",\n      overflow: \"auto\",\n      minHeight: \"0 !important\"\n    },\n    className: \"ant-row\" // style={{ display: 'flex', flexDirection: 'column-reverse' }} //To put endMessage and loader to the top.\n    ,\n    dataLength: items.length,\n    next: fetchItems,\n    hasMore: hasMore,\n    loader: __jsx(Loader, null),\n    height: 500\n  }, items.map(function (item, index) {\n    return __jsx(_Col, {\n      key: index,\n      lg: 4,\n      sm: 6\n    }, __jsx(\"div\", {\n      style: {\n        backgroundImage: \"url(\".concat(item.file, \")\"),\n        backgroundPosition: \"center\",\n        backgroundSize: \"cover\",\n        height: \"100px\"\n      },\n      className: classNames(\"gallery-item\", {\n        active: item.id === (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.id)\n      }),\n      onClick: function onClick() {\n        return onSelectImage(item);\n      }\n    }));\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}