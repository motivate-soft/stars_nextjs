{"ast":null,"code":"import _Button from \"antd/lib/button\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport { UserCardWrapper } from './UserCard.style';\nimport { notification } from \"@iso/components\";\nimport Input, { Textarea } from \"@iso/components/uielements/input\";\nimport Upload from \"@iso/components/uielements/upload\";\nimport './upload.css';\nimport Select, { SelectOption } from \"@iso/components/uielements/select\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport userActions from \"@redux/users/actions\";\nimport Container from \"@iso/ui/UI/Container/Container\";\nimport Loader from '@iso/components/utility/loader';\nimport Box from \"@iso/ui/Box/Box\";\nimport { SingeUserWrapper } from \"@components/Admin/Users/UserList.style\";\nconst Option = SelectOption;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 8\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 16\n    }\n  }\n};\n\nfunction beforeUpload(file) {\n  const isJPG = file.type === 'image/jpeg';\n\n  if (!isJPG) {\n    notification('error', 'You can only upload JPG file!', '');\n    return false;\n  }\n\n  const isLt2M = file.size / 1024 / 1024 < 2;\n\n  if (!isLt2M) {\n    notification('error', 'Image must smaller than 2MB!', '');\n    return false;\n  }\n\n  notification('success', 'Image uploaded successfully!', '');\n  return true;\n}\n\nexport default function EditUser(props) {\n  const {\n    userId\n  } = props;\n  const {\n    selectedItem,\n    loading\n  } = useSelector(state => state.Users);\n  const dispatch = useDispatch();\n\n  const [form] = _Form.useForm();\n\n  useEffect(() => {\n    dispatch(userActions.getUser(userId));\n  }, []);\n\n  const onFinish = values => {\n    dispatch(userActions.updateUser(_objectSpread({\n      id: userId\n    }, values)));\n  };\n\n  if (loading) return __jsx(Loader, null);\n  return __jsx(Box, null, __jsx(Container, null, __jsx(SingeUserWrapper, null, __jsx(UserCardWrapper, {\n    className: \"isoUserCard\"\n  }, __jsx(\"div\", {\n    className: \"card-title-wrapper\"\n  }, __jsx(\"h3\", null, \"Edit User\"), __jsx(Link, {\n    href: \"/admin/user\"\n  }, __jsx(_Button, {\n    type: \"primary\"\n  }, \"Back to List\"))), __jsx(\"div\", {\n    className: \"isoUserCardHead\"\n  }), __jsx(\"div\", {\n    className: \"isoUserInfoWrapper\"\n  }, selectedItem && selectedItem.id === parseInt(userId) && __jsx(_Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"userEdit\",\n    className: \"isoUserInfoWrapper\",\n    onFinish: onFinish,\n    initialValues: {\n      username: selectedItem.username,\n      first_name: selectedItem.first_name,\n      last_name: selectedItem.last_name,\n      status: selectedItem.status,\n      role: selectedItem.role\n    },\n    scrollToFirstError: true\n  }), __jsx(_Form.Item, {\n    label: \"Username\",\n    name: \"username\",\n    className: \"isoUserCardInfos\",\n    rules: [{\n      required: true,\n      message: 'Please input username'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"Username\"\n  })), __jsx(_Form.Item, {\n    label: \"First Name\",\n    name: \"first_name\",\n    className: \"isoUserCardInfos\",\n    rules: [{\n      required: true,\n      message: 'Please input first name'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"First Name\"\n  })), __jsx(_Form.Item, {\n    label: \"Last Name\",\n    name: \"last_name\",\n    className: \"isoUserCardInfos\",\n    rules: [{\n      required: true,\n      message: 'Please input Last name'\n    }]\n  }, __jsx(Input, {\n    placeholder: \"First Name\"\n  })), __jsx(_Form.Item, {\n    label: \"Role\",\n    name: \"role\",\n    className: \"isoUserCardInfos\",\n    rules: [{\n      required: true,\n      message: 'Please select role'\n    }]\n  }, __jsx(Select, {\n    placeholder: \"Please select role\"\n  }, __jsx(Option, {\n    value: \"S\"\n  }, \"Super Admin\"), __jsx(Option, {\n    value: \"A\"\n  }, \"Admin\"), __jsx(Option, {\n    value: \"E\"\n  }, \"Editor\"))), __jsx(_Form.Item, {\n    label: \"Status\",\n    name: \"status\",\n    className: \"isoUserCardInfos\",\n    rules: [{\n      required: true,\n      message: 'Please select status'\n    }]\n  }, __jsx(Select, {\n    placeholder: \"Please select status\"\n  }, __jsx(Option, {\n    value: \"P\"\n  }, \"Pending\"), __jsx(Option, {\n    value: \"A\"\n  }, \"APPROVED\"), __jsx(Option, {\n    value: \"B\"\n  }, \"BLOCKED\"))), __jsx(_Form.Item, {\n    wrapperCol: {\n      span: 12,\n      offset: 6\n    }\n  }, __jsx(_Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"Save\"))))))));\n}","map":null,"metadata":{},"sourceType":"module"}