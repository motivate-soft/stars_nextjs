{"ast":null,"code":"import _Layout from \"antd/lib/layout\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clone from 'clone';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Menu from '@iso/components/uielements/menu';\nimport IntlMessages from '@iso/components/utility/intlMessages';\nimport appActions from '@iso/redux/app/actions';\nimport Logo from '@iso/components/utility/Logo.next';\nimport SidebarWrapper from './Sidebar.styles';\nimport SidebarMenu from './SidebarMenu';\nimport SIDEBAR_MENU_OPTIONS from './sidebar.navigations';\nimport { SidebarMenuLevelIcon } from '@iso/config/icon.config';\nvar SubMenu = Menu.SubMenu;\nvar MenuItemGroup = Menu.ItemGroup;\nvar Sider = _Layout.Sider;\nvar toggleOpenDrawer = appActions.toggleOpenDrawer,\n    changeOpenKeys = appActions.changeOpenKeys,\n    changeCurrent = appActions.changeCurrent,\n    toggleCollapsed = appActions.toggleCollapsed;\nexport default function Sidebar(props) {\n  var _useSelector = useSelector(function (state) {\n    return state.App;\n  }),\n      view = _useSelector.view,\n      openKeys = _useSelector.openKeys,\n      collapsed = _useSelector.collapsed,\n      openDrawer = _useSelector.openDrawer,\n      height = _useSelector.height,\n      current = _useSelector.current;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.ThemeSwitcher;\n  }),\n      sidebarTheme = _useSelector2.sidebarTheme;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(null),\n      scrollheight = _useState[0],\n      setScrollheight = _useState[1];\n\n  var _useState2 = useState(null),\n      isCollapsed = _useState2[0],\n      setIsCollapsed = _useState2[1];\n\n  useEffect(function () {\n    setScrollheight(height);\n  }, [height]);\n  useEffect(function () {\n    setIsCollapsed(collapsed && !openDrawer);\n  }, [collapsed]);\n\n  function handleClick(e) {\n    dispatch(changeCurrent([e.key]));\n\n    if (view === 'MobileView') {\n      setTimeout(function () {\n        dispatch(toggleCollapsed()); // dispatch(toggleOpenDrawer());\n      }, 100);\n    }\n  }\n\n  function onOpenChange(newOpenKeys) {\n    var latestOpenKey = newOpenKeys.find(function (key) {\n      return !(openKeys.indexOf(key) > -1);\n    });\n    var latestCloseKey = openKeys.find(function (key) {\n      return !(newOpenKeys.indexOf(key) > -1);\n    });\n    var nextOpenKeys = [];\n\n    if (latestOpenKey) {\n      nextOpenKeys = getAncestorKeys(latestOpenKey).concat(latestOpenKey);\n    }\n\n    if (latestCloseKey) {\n      nextOpenKeys = getAncestorKeys(latestCloseKey);\n    }\n\n    dispatch(changeOpenKeys(nextOpenKeys));\n  }\n\n  var getAncestorKeys = function getAncestorKeys(key) {\n    var map = {\n      sub3: ['sub2']\n    };\n    return map[key] || [];\n  };\n\n  var mode = isCollapsed === true ? 'vertical' : 'inline';\n  var styling = {\n    backgroundColor: sidebarTheme.backgroundColor\n  };\n  var submenuStyle = {\n    backgroundColor: 'rgba(0,0,0,0.3)',\n    color: sidebarTheme.textColor\n  };\n  var submenuColor = {\n    color: sidebarTheme.textColor\n  };\n\n  var onMouseEnter = function onMouseEnter() {\n    if (collapsed && openDrawer === false) {\n      dispatch(toggleOpenDrawer());\n    }\n\n    return;\n  };\n\n  var onMouseLeave = function onMouseLeave() {\n    if (collapsed && openDrawer === true) {\n      dispatch(toggleOpenDrawer());\n    }\n\n    return;\n  };\n\n  return __jsx(SidebarWrapper, null, __jsx(Sider, {\n    trigger: null,\n    collapsible: true,\n    collapsed: isCollapsed,\n    width: 240,\n    className: \"isomorphicSidebar\",\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    style: styling\n  }, __jsx(Logo, {\n    collapsed: isCollapsed\n  }), __jsx(Scrollbars, {\n    style: {\n      height: scrollheight - 70\n    }\n  }, __jsx(Menu, {\n    onClick: handleClick,\n    theme: \"dark\",\n    mode: mode,\n    openKeys: isCollapsed ? [] : openKeys,\n    selectedKeys: current,\n    onOpenChange: onOpenChange,\n    className: \"isoDashboardMenu\" // inlineCollapsed={isCollapsed}\n\n  }, SIDEBAR_MENU_OPTIONS.map(function (option) {\n    return __jsx(SidebarMenu, {\n      key: option.key,\n      item: option,\n      submenuColor: submenuColor,\n      submenuStyle: submenuStyle\n    });\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}