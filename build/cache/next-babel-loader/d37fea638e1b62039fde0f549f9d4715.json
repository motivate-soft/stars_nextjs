{"ast":null,"code":"import _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _InboxOutlined from \"@ant-design/icons/lib/icons/InboxOutlined\";\nimport _Input from \"antd/lib/input\";\nimport _Button from \"antd/lib/button\";\nimport _message from \"antd/lib/message\";\nimport _Upload from \"antd/lib/upload\";\nimport _Form from \"antd/lib/form\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Loader from \"@iso/components/utility/loader\";\nimport Box from \"@iso/ui/Box/Box\";\nimport Container from \"@iso/ui/UI/Container/Container\";\nimport Editor from \"@components/Admin/Property/Editor/Editor\";\nimport Link from \"next/link\";\nimport blogActions from \"@redux/blogs/actions\";\nimport { SingeBlogWrapper } from \"@components/Admin/Blog/Blog.styles\";\nimport { BACKEND_URL } from \"../../../env-config\";\nimport { getCookie } from \"@redux/authentication/auth.utils\";\nimport { isServer } from \"@iso/lib/helpers/isServer\";\nimport Auth from \"@redux/authentication/reducer\";\nconst formItemLayout = {\n  labelCol: {\n    span: 24\n  },\n  wrapperCol: {\n    span: 24\n  }\n};\nconst {\n  useForm\n} = _Form;\nconst {\n  Dragger\n} = _Upload;\n\nconst HtmlEditor = ({\n  value = {},\n  onChange\n}) => {\n  const triggerChange = changedValue => {\n    onChange(changedValue);\n  };\n\n  return __jsx(Editor, {\n    style: {\n      width: \"90%\",\n      height: \"70%\"\n    },\n    toolbarClassName: \"home-toolbar\",\n    wrapperClassName: \"home-wrapper\",\n    editorClassName: \"home-editor\",\n    html: value,\n    onEditorStateChange: html => triggerChange(html)\n  });\n};\n\nexport default function AddBlog() {\n  const {\n    profile\n  } = useSelector(state => state.Auth);\n  const dispatch = useDispatch();\n  let uploaderProps;\n\n  if (!isServer) {\n    uploaderProps = {\n      name: 'file',\n      multiple: true,\n      action: `${BACKEND_URL}/api/media/create`,\n      listType: \"picture\",\n      maxCount: 1,\n      headers: {\n        Authorization: \"Bearer \" + getCookie(\"token\")\n      },\n      beforeUpload: file => {\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n\n        if (!isJpgOrPng) {\n          _message.error('You can only upload JPG/PNG file!');\n        }\n\n        const isLt2M = file.size / 1024 / 1024 < 2;\n\n        if (!isLt2M) {\n          _message.error('Image must smaller than 2MB!');\n        }\n\n        return isJpgOrPng && isLt2M;\n      },\n\n      onChange(info) {\n        const {\n          status,\n          response\n        } = info.file;\n\n        if (status !== 'uploading') {\n          console.log(info.file, info.fileList);\n        }\n\n        if (status === 'done') {\n          console.log(\"uploader_response\", response);\n          form.setFieldsValue({\n            image: response.id\n          });\n\n          _message.success(`${info.file.name} file uploaded successfully.`);\n        } else if (status === 'error') {\n          _message.error(`${info.file.name} file upload failed.`);\n        }\n      }\n\n    };\n  }\n\n  const [form] = useForm();\n\n  function onReset() {\n    form.resetFields();\n  }\n\n  function onValuesChange(changedValues, allValues) {\n    console.log(\"AddBlog_onValuesChange\", changedValues, allValues);\n  }\n\n  const onFinish = values => {\n    console.log(\"values\", values, profile);\n    dispatch(blogActions.addBlog(_objectSpread(_objectSpread({}, values), {}, {\n      author: profile.id\n    })));\n  };\n\n  return __jsx(Box, null, __jsx(Container, null, __jsx(_Row, null, __jsx(_Col, {\n    lg: {\n      span: 20,\n      offset: 2\n    },\n    sm: 24\n  }, __jsx(SingeBlogWrapper, null, __jsx(\"div\", {\n    className: \"card-title-wrapper\"\n  }, __jsx(\"h3\", null, \"Add Blog\"), __jsx(Link, {\n    href: \"/admin/blog\"\n  }, __jsx(_Button, {\n    type: \"primary\"\n  }, \"Back to List\"))), __jsx(_Form, _extends({}, formItemLayout, {\n    form: form,\n    onFinish: onFinish,\n    onValuesChange: onValuesChange,\n    initialValues: {\n      title: '',\n      body: '',\n      image: null\n    }\n  }), __jsx(_Form.Item, {\n    label: \"Title\",\n    name: \"title\",\n    rules: [{\n      required: true,\n      message: \"This field is required\"\n    }]\n  }, __jsx(_Input, null)), __jsx(_Form.Item, {\n    label: \"Content\",\n    name: \"body\",\n    rules: [{\n      required: true,\n      message: \"This field is required\"\n    }]\n  }, __jsx(HtmlEditor, null)), __jsx(_Form.Item, {\n    name: \"image\",\n    hidden: true\n  }, __jsx(_Input, null)), __jsx(Dragger, uploaderProps, __jsx(\"p\", {\n    className: \"ant-upload-drag-icon\"\n  }, __jsx(_InboxOutlined, null)), __jsx(\"p\", {\n    className: \"ant-upload-text\"\n  }, \"Click or drag file to this area to upload\")), __jsx(\"div\", {\n    className: \"blog-actions-wrapper\"\n  }, __jsx(_Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"Save\"), __jsx(_Button, {\n    type: \"default\",\n    onClick: onReset\n  }, \"Reset\"))))))));\n}","map":null,"metadata":{},"sourceType":"module"}