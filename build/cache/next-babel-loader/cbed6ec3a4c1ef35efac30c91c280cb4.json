{"ast":null,"code":"import _Button from \"antd/lib/button\";\nimport _Row from \"antd/lib/row\";\nimport _Input from \"antd/lib/input\";\nimport _Col from \"antd/lib/col\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport _Form from \"antd/lib/form\";\nimport _Select from \"antd/lib/select\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport styled from \"styled-components\";\nimport { BookingContext } from \"@context/BookingProvider\";\nimport { notification } from \"@iso/components\";\nimport csc from \"country-state-city\";\nimport { palette } from \"styled-tools\";\nconst countries = csc.getAllCountries();\nconst Option = {\n  Select: _Select\n};\nconst formItemLayout = {\n  wrapperCol: {\n    sm: {\n      span: 24\n    }\n  }\n};\nconst FormWrapper = styled.div.withConfig({\n  displayName: \"MailingAddress__FormWrapper\",\n  componentId: \"feoz7s-0\"\n})([\"h3{color:\", \";}.ant-select-selector{height:48px !important;line-height:48px;width:100%;border:2px solid #e4e7ea;border-radius:4px;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;&:focus,&:active{border:2px solid \", \";box-shadow:none !important;}}button{margin-left:auto;max-width:280px;width:100%;}\"], palette('primary', 0), palette('warning', 0));\n\nfunction MailingAddressForm(props) {\n  const router = useRouter();\n  const {\n    state,\n    dispatch\n  } = useContext(BookingContext);\n\n  const [form] = _Form.useForm();\n\n  console.log(\"BookingContext\", state);\n  const {\n    0: stateOptions,\n    1: setStateOptions\n  } = useState([{\n    label: '---State---',\n    value: \"default\"\n  }]);\n  const {\n    0: cityOptions,\n    1: setCityOptions\n  } = useState([{\n    label: '---City---',\n    value: \"default\"\n  }]);\n\n  const onCountryChange = value => {\n    let array = csc.getStatesOfCountry(value).map(state => ({\n      value: state.id,\n      label: state.name\n    }));\n    array.unshift({\n      label: '---State---',\n      value: \"default\"\n    });\n    form.resetFields(['state', 'city']);\n    setStateOptions(array); // form.setFieldsValue({'country': value, 'state': 'default', city: 'default'})\n  };\n\n  const onStateChange = value => {\n    let array = csc.getCitiesOfState(value).map(city => ({\n      value: city.id,\n      label: city.name\n    }));\n    array.unshift({\n      label: '---City---',\n      value: \"default\"\n    });\n    form.resetFields(['city']);\n    setCityOptions(array);\n    console.log(\"onStateChange\", value, array);\n  };\n\n  const onFinish = values => {\n    if (state.checkinDate === null || state.checkoutDate === null) {\n      notification(\"warning\", \"Please select dates\");\n      return;\n    }\n\n    if (state.adults === 0) {\n      notification(\"warning\", \"Please input number of guests\");\n      return;\n    }\n\n    let countrySortName = csc.getCountryById(values.country).sortname;\n    let stateName = csc.getStateById(values.state).name;\n    let cityName = values.city !== \"default\" ? csc.getCityById(values.city).name : \"\";\n    console.log(\"__onFinish\", countrySortName, stateName, cityName);\n    dispatch({\n      type: \"UPDATE_BOOKING_INFORMATION\",\n      payload: _objectSpread(_objectSpread({}, state), {}, {\n        billing: {\n          country: countrySortName,\n          state: stateName,\n          city: cityName,\n          street: values.street,\n          zipCode: values.zipCode\n        }\n      })\n    });\n    router.push(\"/checkout-payment\");\n  };\n\n  return __jsx(FormWrapper, null, __jsx(_Form, _extends({}, formItemLayout, {\n    form: form,\n    name: \"mailing-info\",\n    className: \"mailing-form\",\n    onFinish: onFinish,\n    initialValues: {\n      agreement: false,\n      country: \"default\",\n      state: \"default\",\n      city: \"default\",\n      street: \"\",\n      zipCode: \"\"\n    },\n    scrollToFirstError: true\n  }), __jsx(_Row, {\n    gutter: [32, 32]\n  }, __jsx(_Col, {\n    sm: 24\n  }, __jsx(_Form.Item, {\n    name: \"agreement\",\n    valuePropName: \"checked\",\n    rules: [{\n      validator: (_, value) => value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement'))\n    }]\n  }, __jsx(_Checkbox, null, \"I have read and agree to comply with all rental policies and terms.\")), __jsx(\"h5\", null, \"Mailing Address\")), __jsx(_Col, {\n    lg: 12,\n    sm: 24\n  }, __jsx(_Form.Item, {\n    name: \"street\",\n    rules: [{\n      required: true,\n      message: \"This field is required\"\n    }]\n  }, __jsx(_Input, {\n    size: \"large\",\n    placeholder: \"Street\"\n  }))), __jsx(_Col, {\n    lg: 12,\n    sm: 24\n  }, __jsx(_Form.Item, {\n    name: \"country\",\n    rules: [{\n      required: true,\n      message: \"This field is required\"\n    }]\n  }, __jsx(_Select, {\n    placeholder: \"Country\",\n    onChange: onCountryChange,\n    size: \"large\",\n    defaultValue: \"default\"\n  }, __jsx(Option, {\n    value: \"default\"\n  }, \"---Country---\"), countries && countries.map((country, index) => __jsx(Option, {\n    key: index,\n    value: country.id\n  }, country.name))))), __jsx(_Col, {\n    lg: 8,\n    sm: 24\n  }, __jsx(_Form.Item, {\n    name: \"state\",\n    rules: [{\n      required: true,\n      message: \"This field is required\"\n    }]\n  }, __jsx(_Select, {\n    placeholder: \"State\",\n    size: \"large\",\n    options: stateOptions,\n    defaultValue: \"default\",\n    onChange: onStateChange\n  }))), __jsx(_Col, {\n    lg: 8,\n    sm: 24\n  }, __jsx(_Form.Item, {\n    name: \"city\",\n    rules: [{\n      required: true,\n      message: \"This field is required\"\n    }]\n  }, __jsx(_Select, {\n    placeholder: \"City\",\n    size: \"large\",\n    options: cityOptions,\n    defaultValue: \"default\"\n  }))), __jsx(_Col, {\n    lg: 8,\n    sm: 24\n  }, __jsx(_Form.Item, {\n    name: \"zipCode\",\n    rules: [{\n      required: true,\n      message: \"This field is required\"\n    }]\n  }, __jsx(_Input, {\n    size: \"large\",\n    placeholder: \"Zip Code\"\n  })))), __jsx(_Button, {\n    type: \"secondary\",\n    htmlType: \"submit\",\n    size: \"large\"\n  }, \"Continue\")));\n}\n\nexport default MailingAddressForm;","map":null,"metadata":{},"sourceType":"module"}