{"ast":null,"code":"import _Modal from \"antd/lib/modal\";\nimport _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _Button from \"antd/lib/button\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from \"react\";\nimport Box from \"@iso/ui/Box/Box\";\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { BACKEND_URL } from \"../../../../env-config\";\nimport { getCookie } from \"@redux/authentication/auth.utils\";\nimport { notification } from \"@iso/components\";\nconst cropSetting = {\n  unit: '%',\n  width: 80,\n  height: 40 // aspect: 16 / 9,\n\n};\nexport default function CropImage(props) {\n  const {\n    imageTitle,\n    imagePath,\n    onUploadSuccess\n  } = props;\n  const {\n    0: crop,\n    1: setCrop\n  } = useState(cropSetting);\n  const {\n    0: croppedImage,\n    1: setCroppedImage\n  } = useState(null);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const imageRef = useRef(null);\n\n  function showModal() {\n    setVisible(true);\n  }\n\n  function handleCancel() {\n    setVisible(false);\n  }\n\n  function onImageLoaded(image) {\n    imageRef.current = image;\n    console.log(\"onImageLoaded\", imageRef);\n  }\n\n  function onCropComplete(crop) {\n    makeClientCrop(crop);\n  }\n\n  function onCropChange(crop, percentCrop) {\n    setCrop(crop);\n  }\n\n  async function makeClientCrop(crop) {\n    if (imageRef.current && crop.width && crop.height) {\n      const newCroppedImage = await getCroppedImg(imageRef.current, crop, 'crop.jpeg');\n      setCroppedImage(newCroppedImage);\n    }\n  }\n\n  function getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = Math.ceil(crop.width * scaleX);\n    canvas.height = Math.ceil(crop.height * scaleY);\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width * scaleX, crop.height * scaleY);\n    return canvas.toDataURL('image/jpeg'); // return new Promise((resolve, reject) => {\n    //     canvas.toBlob(blob => {\n    //         if (!blob) {\n    //             //reject(new Error('Canvas is empty'))\n    //             console.error('Canvas is empty')\n    //             return\n    //         }\n    //         blob.name = fileName\n    //         window.URL.revokeObjectURL(fileUrl)\n    //         fileUrl = window.URL.createObjectURL(blob)\n    //         resolve(fileUrl)\n    //     }, 'image/jpeg')\n    // })\n  }\n\n  function handleSaveCroppedImage(image) {\n    setVisible(false);\n    const media = {\n      title: imageTitle,\n      imageData: croppedImage\n    };\n    fetch(`${BACKEND_URL}/api/media/create`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${getCookie(\"token\")}`\n      },\n      body: JSON.stringify(media)\n    }).then(res => res.json()).then(res => {\n      console.log(\"handleSaveCroppedImage\", res);\n      onUploadSuccess(res);\n      notification('success', 'Cropped image saved!');\n    }).catch(error => error);\n  } // function handleDeleteImage(id) {\n  // }\n\n\n  return __jsx(\"div\", null, __jsx(_Button, {\n    type: \"primary\",\n    onClick: showModal\n  }, \"Crop\"), __jsx(_Modal, {\n    visible: visible,\n    className: \"crop-modal\",\n    title: \"Crop image\",\n    okText: \"Save\",\n    onOk: handleSaveCroppedImage,\n    onCancel: handleCancel // footer={[\n    //     <Button key=\"save\" type=\"primary\" onClick={handleSaveCroppedImage}>\n    //         Save\n    //     </Button>,\n    //     <Button\n    //         key=\"cancel\"\n    //         type=\"default\"\n    //         onClick={handleCancel}\n    //     >\n    //         Cancel\n    //     </Button>,\n    // ]}\n\n  }, __jsx(Box, null, __jsx(_Row, null, __jsx(_Col, {\n    sm: 16\n  }, imagePath && __jsx(ReactCrop, {\n    className: \"d-block mx-auto\",\n    src: imagePath,\n    crossorigin: \"*\",\n    crop: crop,\n    ruleOfThirds: true,\n    onImageLoaded: onImageLoaded,\n    onComplete: onCropComplete,\n    onChange: onCropChange\n  })), __jsx(_Col, {\n    sm: 8\n  }, croppedImage && __jsx(\"img\", {\n    alt: \"Crop\",\n    style: {\n      width: '100%'\n    },\n    crossOrigin: \"*\",\n    src: croppedImage\n  }))))));\n}","map":null,"metadata":{},"sourceType":"module"}