{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getAllCategories),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getCategory),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addCategory),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(updateCategory),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(deleteCategory),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport actions from \"./actions\";\nimport { notification } from \"@iso/components\";\nimport categoryApi from \"../../service/categoryApi\";\nexport function getAllCategories() {\n  return _regeneratorRuntime.wrap(function getAllCategories$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.GET_ALL_CATEGORIES_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(categoryApi.getAll);\n\n                  case 3:\n                    res = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: actions.GET_ALL_CATEGORIES_SUCCESS,\n                      items: res\n                    });\n\n                  case 6:\n                    _context.next = 12;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    _context.next = 12;\n                    return put({\n                      type: actions.GET_ALL_CATEGORIES_FAILURE,\n                      error: _context.t0.message\n                    });\n\n                  case 12:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked);\n}\nexport function getCategory() {\n  return _regeneratorRuntime.wrap(function getCategory$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(actions.GET_CATEGORY_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return call(categoryApi.getOne, payload.categoryId);\n\n                  case 3:\n                    res = _context3.sent;\n                    _context3.next = 6;\n                    return put({\n                      type: actions.GET_CATEGORY_SUCCESS,\n                      item: res\n                    });\n\n                  case 6:\n                    _context3.next = 12;\n                    break;\n\n                  case 8:\n                    _context3.prev = 8;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    _context3.next = 12;\n                    return put({\n                      type: actions.GET_CATEGORY_FAILURE,\n                      error: _context3.t0.message\n                    });\n\n                  case 12:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee2, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function addCategory() {\n  return _regeneratorRuntime.wrap(function addCategory$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(actions.ADD_CATEGORY_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee3$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.prev = 0;\n                    _context5.next = 3;\n                    return call(categoryApi.add, payload.category);\n\n                  case 3:\n                    res = _context5.sent;\n                    notification(\"success\", \"New category has been created\");\n                    _context5.next = 7;\n                    return put({\n                      type: actions.ADD_CATEGORY_SUCCESS,\n                      item: res\n                    });\n\n                  case 7:\n                    _context5.next = 14;\n                    break;\n\n                  case 9:\n                    _context5.prev = 9;\n                    _context5.t0 = _context5[\"catch\"](0);\n                    notification(\"warning\", _context5.t0);\n                    _context5.next = 14;\n                    return put({\n                      type: actions.ADD_CATEGORY_FAILURE,\n                      error: _context5.t0.message\n                    });\n\n                  case 14:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee3, null, [[0, 9]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function updateCategory() {\n  return _regeneratorRuntime.wrap(function updateCategory$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(actions.UPDATE_CATEGORY_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload) {\n            var res;\n            return _regeneratorRuntime.wrap(function _callee4$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _context7.prev = 0;\n                    _context7.next = 3;\n                    return call(categoryApi.update, payload.category);\n\n                  case 3:\n                    res = _context7.sent;\n                    notification(\"success\", \"Category has been updated\");\n                    _context7.next = 7;\n                    return put({\n                      type: actions.UPDATE_CATEGORY_SUCCESS,\n                      item: res\n                    });\n\n                  case 7:\n                    _context7.next = 14;\n                    break;\n\n                  case 9:\n                    _context7.prev = 9;\n                    _context7.t0 = _context7[\"catch\"](0);\n                    notification(\"warning\", _context7.t0);\n                    _context7.next = 14;\n                    return put({\n                      type: actions.UPDATE_CATEGORY_FAILURE,\n                      error: _context7.t0.message\n                    });\n\n                  case 14:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee4, null, [[0, 9]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function deleteCategory() {\n  return _regeneratorRuntime.wrap(function deleteCategory$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeEvery(actions.DELETE_CATEGORY_REQUEST, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(payload) {\n            return _regeneratorRuntime.wrap(function _callee5$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    _context9.prev = 0;\n                    _context9.next = 3;\n                    return call(categoryApi[\"delete\"], payload.categoryId);\n\n                  case 3:\n                    notification(\"success\", \"Category has been deleted\");\n                    _context9.next = 6;\n                    return put({\n                      type: actions.DELETE_CATEGORY_SUCCESS,\n                      categoryId: payload.categoryId\n                    });\n\n                  case 6:\n                    _context9.next = 13;\n                    break;\n\n                  case 8:\n                    _context9.prev = 8;\n                    _context9.t0 = _context9[\"catch\"](0);\n                    notification(\"warning\", _context9.t0);\n                    _context9.next = 13;\n                    return put({\n                      type: actions.DELETE_CATEGORY_FAILURE,\n                      error: _context9.t0.message\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _callee5, null, [[0, 8]]);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked5);\n}\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([call(getAllCategories), fork(getCategory), fork(addCategory), fork(updateCategory), fork(deleteCategory)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["E:/Projects/starsofboston/next-django/isomorphic-next/redux/categories/saga.js"],"names":["getAllCategories","getCategory","addCategory","updateCategory","deleteCategory","rootSaga","all","takeEvery","fork","takeLatest","call","put","actions","notification","categoryApi","GET_ALL_CATEGORIES_REQUEST","getAll","res","type","GET_ALL_CATEGORIES_SUCCESS","items","GET_ALL_CATEGORIES_FAILURE","error","message","GET_CATEGORY_REQUEST","payload","getOne","categoryId","GET_CATEGORY_SUCCESS","item","GET_CATEGORY_FAILURE","ADD_CATEGORY_REQUEST","add","category","ADD_CATEGORY_SUCCESS","ADD_CATEGORY_FAILURE","UPDATE_CATEGORY_REQUEST","update","UPDATE_CATEGORY_SUCCESS","UPDATE_CATEGORY_FAILURE","DELETE_CATEGORY_REQUEST","DELETE_CATEGORY_SUCCESS","DELETE_CATEGORY_FAILURE"],"mappings":"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","sourcesContent":["import {\r\n    all,\r\n    takeEvery,\r\n    fork,\r\n    takeLatest,\r\n    call,\r\n    put,\r\n} from \"redux-saga/effects\";\r\nimport actions from \"./actions\";\r\nimport {notification} from \"@iso/components\";\r\nimport categoryApi from \"../../service/categoryApi\";\r\n\r\n\r\nexport function* getAllCategories() {\r\n    yield takeLatest(actions.GET_ALL_CATEGORIES_REQUEST, function* () {\r\n        try {\r\n            const res = yield call(categoryApi.getAll);\r\n            yield put({\r\n                type: actions.GET_ALL_CATEGORIES_SUCCESS,\r\n                items: res,\r\n            });\r\n        } catch (error) {\r\n            yield put({\r\n                type: actions.GET_ALL_CATEGORIES_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* getCategory() {\r\n    yield takeEvery(actions.GET_CATEGORY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(categoryApi.getOne, payload.categoryId);\r\n            yield put({\r\n                type: actions.GET_CATEGORY_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            yield put({\r\n                type: actions.GET_CATEGORY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* addCategory() {\r\n    yield takeEvery(actions.ADD_CATEGORY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(categoryApi.add, payload.category);\r\n            notification(\"success\", \"New category has been created\");\r\n\r\n            yield put({\r\n                type: actions.ADD_CATEGORY_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification(\"warning\", error);\r\n\r\n            yield put({\r\n                type: actions.ADD_CATEGORY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* updateCategory() {\r\n    yield takeEvery(actions.UPDATE_CATEGORY_REQUEST, function* (payload) {\r\n        try {\r\n            const res = yield call(categoryApi.update, payload.category);\r\n            notification(\"success\", \"Category has been updated\");\r\n\r\n            yield put({\r\n                type: actions.UPDATE_CATEGORY_SUCCESS,\r\n                item: res,\r\n            });\r\n        } catch (error) {\r\n            notification(\"warning\", error);\r\n\r\n            yield put({\r\n                type: actions.UPDATE_CATEGORY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport function* deleteCategory() {\r\n    yield takeEvery(actions.DELETE_CATEGORY_REQUEST, function* (payload) {\r\n        try {\r\n            yield call(categoryApi.delete, payload.categoryId);\r\n            notification(\"success\", \"Category has been deleted\");\r\n            yield put({\r\n                type: actions.DELETE_CATEGORY_SUCCESS,\r\n                categoryId: payload.categoryId,\r\n            });\r\n        } catch (error) {\r\n            notification(\"warning\", error);\r\n            yield put({\r\n                type: actions.DELETE_CATEGORY_FAILURE,\r\n                error: error.message,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        call(getAllCategories),\r\n        fork(getCategory),\r\n        fork(addCategory),\r\n        fork(updateCategory),\r\n        fork(deleteCategory),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}